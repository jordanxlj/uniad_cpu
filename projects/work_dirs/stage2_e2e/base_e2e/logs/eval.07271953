NOTE: Redirects are currently not supported in Windows or MacOs.
/opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/distributed/launch.py:163: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
  logger.warn(
The module torch.distributed.launch is deprecated and going to be removed in future.Migrate to torch.distributed.run
WARNING:torch.distributed.run:--use_env is deprecated and will be removed in future releases.
 Please read local_rank from `os.environ('LOCAL_RANK')` instead.
INFO:torch.distributed.launcher.api:Starting elastic_operator with launch configs:
  entrypoint       : ./tools/test.py
  min_nodes        : 1
  max_nodes        : 1
  nproc_per_node   : 1
  run_id           : none
  rdzv_backend     : static
  rdzv_endpoint    : 127.0.0.1:28596
  rdzv_configs     : {'rank': 0, 'timeout': 900}
  max_restarts     : 3
  monitor_interval : 5
  log_dir          : None
  metrics_cfg      : {}

INFO:torch.distributed.elastic.agent.server.local_elastic_agent:log directory set to: /var/folders/bl/c09z1sm91mxfb8z7mn7v4rhh0000gq/T/torchelastic_b22zlak_/none_8_d296a7
INFO:torch.distributed.elastic.agent.server.api:[default] starting workers for entrypoint: python
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous'ing worker group
/opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/distributed/elastic/utils/store.py:52: FutureWarning: This is an experimental API and will be changed in future.
  warnings.warn(
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous complete for workers. Result:
  restart_count=0
  master_addr=127.0.0.1
  master_port=28596
  group_rank=0
  group_world_size=1
  local_ranks=[0]
  role_ranks=[0]
  global_ranks=[0]
  role_world_sizes=[1]
  global_world_sizes=[1]

INFO:torch.distributed.elastic.agent.server.api:[default] Starting worker group
INFO:torch.distributed.elastic.multiprocessing:Setting worker0 reply file to: /var/folders/bl/c09z1sm91mxfb8z7mn7v4rhh0000gq/T/torchelastic_b22zlak_/none_8_d296a7/attempt_0/0/error.json
projects.mmdet3d_plugin
======
Loading NuScenes tables for version v1.0-trainval...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 22.060 seconds.
======
Reverse indexing ...
Done reverse indexing in 6.5 seconds.
======
load checkpoint from local path: ./ckpts/uniad_base_e2e.pth
2023-07-27 19:53:59,675 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.0.conv2 is upgraded to version 2.
2023-07-27 19:53:59,679 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.1.conv2 is upgraded to version 2.
2023-07-27 19:53:59,681 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.2.conv2 is upgraded to version 2.
2023-07-27 19:53:59,683 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.3.conv2 is upgraded to version 2.
2023-07-27 19:53:59,686 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.4.conv2 is upgraded to version 2.
2023-07-27 19:53:59,688 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.5.conv2 is upgraded to version 2.
2023-07-27 19:53:59,691 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.6.conv2 is upgraded to version 2.
2023-07-27 19:53:59,693 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.7.conv2 is upgraded to version 2.
2023-07-27 19:53:59,696 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.8.conv2 is upgraded to version 2.
2023-07-27 19:53:59,698 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.9.conv2 is upgraded to version 2.
2023-07-27 19:53:59,700 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.10.conv2 is upgraded to version 2.
2023-07-27 19:53:59,703 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.11.conv2 is upgraded to version 2.
2023-07-27 19:53:59,705 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.12.conv2 is upgraded to version 2.
2023-07-27 19:53:59,707 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.13.conv2 is upgraded to version 2.
2023-07-27 19:53:59,710 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.14.conv2 is upgraded to version 2.
2023-07-27 19:53:59,712 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.15.conv2 is upgraded to version 2.
2023-07-27 19:53:59,715 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.16.conv2 is upgraded to version 2.
2023-07-27 19:53:59,717 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.17.conv2 is upgraded to version 2.
2023-07-27 19:53:59,719 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.18.conv2 is upgraded to version 2.
2023-07-27 19:53:59,722 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.19.conv2 is upgraded to version 2.
2023-07-27 19:53:59,724 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.20.conv2 is upgraded to version 2.
2023-07-27 19:53:59,726 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.21.conv2 is upgraded to version 2.
2023-07-27 19:53:59,729 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.22.conv2 is upgraded to version 2.
2023-07-27 19:53:59,732 - root - INFO - ModulatedDeformConvPack img_backbone.layer4.0.conv2 is upgraded to version 2.
2023-07-27 19:53:59,736 - root - INFO - ModulatedDeformConvPack img_backbone.layer4.1.conv2 is upgraded to version 2.
2023-07-27 19:53:59,739 - root - INFO - ModulatedDeformConvPack img_backbone.layer4.2.conv2 is upgraded to version 2.
The model and loaded state dict do not match exactly

size mismatch for seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
unexpected key in source state_dict: bbox_size_fc.weight, bbox_size_fc.bias, pts_bbox_head.query_embedding.weight, pts_bbox_head.transformer.reference_points.weight, pts_bbox_head.transformer.reference_points.bias

> /Users/liangming.xu/code/UniAD/tools/test.py(230)main()
-> result = model(return_loss=False, rescale=True, **data)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_track.py(724)simple_test_track()
-> bs = img.size(0)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_e2e.py(297)forward_test()
-> result_track[0] = self.upsample_bev_if_tiny(result_track[0])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/panseg_head.py(1013)forward_test()
-> bbox_list = [dict() for i in range(len(img_metas))]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/panseg_head.py(227)forward()
-> enc_outputs_class, enc_outputs_coord = self.transformer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(170)forward_test()
-> track_query = outs_track['track_query_embeddings'][None, None, ...]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(347)forward()
-> 'all_traj_scores': outputs_traj_scores,
(Pdb) 342  	
343  	        B, A_track, D = track_query.shape
344  	        valid_traj_masks = track_query.new_ones((B, A_track)) > 0
345  	        import pdb; pdb.set_trace()
346  	        outs = {
347  ->	            'all_traj_scores': outputs_traj_scores,
348  	            'all_traj_preds': outputs_trajs,
349  	            'valid_traj_masks': valid_traj_masks,
350  	            'traj_query': inter_states,
351  	            'track_query': track_query,
352  	            'track_query_pos': track_query_pos,
(Pdb) torch.Size([3, 1, 4, 6, 256])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(418)forward_test()
-> gt_segmentation, gt_instance, gt_img_is_valid = self.get_occ_labels(gt_segmentation, gt_instance, gt_img_is_valid)
(Pdb) 413  	                    gt_segmentation=None,
414  	                    gt_instance=None,
415  	                    gt_img_is_valid=None,
416  	                ):
417  	        import pdb; pdb.set_trace()
418  ->	        gt_segmentation, gt_instance, gt_img_is_valid = self.get_occ_labels(gt_segmentation, gt_instance, gt_img_is_valid)
419  	
420  	        out_dict = dict()
421  	        out_dict['seg_gt']  = gt_segmentation[:, :1+self.n_future]  # [1, 5, 1, 200, 200]
422  	        out_dict['ins_seg_gt'] = self.get_ins_seg_gt(gt_instance[:, :1+self.n_future])  # [1, 5, 200, 200]
423  	        if no_query:
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(420)forward_test()
-> out_dict = dict()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(421)forward_test()
-> out_dict['seg_gt']  = gt_segmentation[:, :1+self.n_future]  # [1, 5, 1, 200, 200]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(422)forward_test()
-> out_dict['ins_seg_gt'] = self.get_ins_seg_gt(gt_instance[:, :1+self.n_future])  # [1, 5, 200, 200]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(423)forward_test()
-> if no_query:
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(429)forward_test()
-> ins_query = self.merge_queries(outs_dict, self.detach_query_pos)
(Pdb) --Call--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(271)merge_queries()
-> def merge_queries(self, outs_dict, detach_query_pos=True):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(272)merge_queries()
-> ins_query = outs_dict.get('traj_query', None)       # [n_dec, b, nq, n_modes, dim]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(273)merge_queries()
-> track_query = outs_dict['track_query']              # [b, nq, d]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(274)merge_queries()
-> track_query_pos = outs_dict['track_query_pos']      # [b, nq, d]
(Pdb) torch.Size([1, 2, 256])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(276)merge_queries()
-> if detach_query_pos:
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(277)merge_queries()
-> track_query_pos = track_query_pos.detach()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(279)merge_queries()
-> ins_query = ins_query[-1]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(280)merge_queries()
-> ins_query = self.mode_fuser(ins_query).max(2)[0]
(Pdb) torch.Size([1, 2, 6, 256])
(Pdb) *** NameError: name 'tensor' is not defined
(Pdb) (Pdb) (Pdb) torch.Size([2])
(Pdb) tensor([3, 4])
(Pdb) 275  	
276  	        if detach_query_pos:
277  	            track_query_pos = track_query_pos.detach()
278  	
279  	        ins_query = ins_query[-1]
280  ->	        ins_query = self.mode_fuser(ins_query).max(2)[0]
281  	        ins_query = self.multi_query_fuser(torch.cat([ins_query, track_query, track_query_pos], dim=-1))
282  	
283  	        return ins_query
284  	
285  	    # With matched queries [a small part of all queries] and matched_gt results
(Pdb) torch.Size([1, 2, 256])
(Pdb) Sequential(
  (0): Linear(in_features=256, out_features=256, bias=True)
  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  (2): ReLU(inplace=True)
)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(281)merge_queries()
-> ins_query = self.multi_query_fuser(torch.cat([ins_query, track_query, track_query_pos], dim=-1))
(Pdb) torch.Size([1, 2, 256])
(Pdb) Sequential(
  (0): Linear(in_features=768, out_features=512, bias=True)
  (1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  (2): ReLU(inplace=True)
  (3): Linear(in_features=512, out_features=256, bias=True)
)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(283)merge_queries()
-> return ins_query
(Pdb) torch.Size([1, 2, 256])
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(283)merge_queries()->tensor([[[-9....9.9264e-01]]])
-> return ins_query
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(431)forward_test()
-> _, pred_ins_logits = self(bev_feat, ins_query=ins_query)
(Pdb) --Call--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1045)_call_impl()
-> def _call_impl(self, *input, **kwargs):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1046)_call_impl()
-> forward_call = (self._slow_forward if torch._C._get_tracing_state() else self.forward)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1049)_call_impl()
-> if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1050)_call_impl()
-> or _global_forward_hooks or _global_forward_pre_hooks):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1049)_call_impl()
-> if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1050)_call_impl()
-> or _global_forward_hooks or _global_forward_pre_hooks):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1049)_call_impl()
-> if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()
-> return forward_call(*input, **kwargs)
(Pdb) --Call--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(198)forward()
-> def forward(self, x, ins_query):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(199)forward()
-> base_state = rearrange(x, '(h w) b d -> b d h w', h=self.bev_size[0])
(Pdb) torch.Size([40000, 1, 256])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(54)forward()
-> if self.identity_mapping:
(Pdb)  49  	            self.map_grid = torch.stack([tmp_m, tmp_n], dim=2)
 50  	
 51  	    def forward(self, x):
 52  	        import pdb; pdb.set_trace()
 53  	        # x: bev feature map tensor of shape (b, c, h, w)
 54  ->	        if self.identity_mapping:
 55  	            return x
 56  	        else:
 57  	            grid = self.map_grid.unsqueeze(0).type_as(
 58  	                x).repeat(x.shape[0], 1, 1, 1)  # (b, h, w, 2)
 59  	
(Pdb) torch.Size([200, 200, 2])
(Pdb) tensor([[-0.9766, -0.9766],
        [-0.9667, -0.9766],
        [-0.9569, -0.9766],
        [-0.9471, -0.9766],
        [-0.9373, -0.9766],
        [-0.9275, -0.9766],
        [-0.9177, -0.9766],
        [-0.9079, -0.9766],
        [-0.8980, -0.9766],
        [-0.8882, -0.9766],
        [-0.8784, -0.9766],
        [-0.8686, -0.9766],
        [-0.8588, -0.9766],
        [-0.8490, -0.9766],
        [-0.8392, -0.9766],
        [-0.8293, -0.9766],
        [-0.8195, -0.9766],
        [-0.8097, -0.9766],
        [-0.7999, -0.9766],
        [-0.7901, -0.9766],
        [-0.7803, -0.9766],
        [-0.7705, -0.9766],
        [-0.7606, -0.9766],
        [-0.7508, -0.9766],
        [-0.7410, -0.9766],
        [-0.7312, -0.9766],
        [-0.7214, -0.9766],
        [-0.7116, -0.9766],
        [-0.7018, -0.9766],
        [-0.6919, -0.9766],
        [-0.6821, -0.9766],
        [-0.6723, -0.9766],
        [-0.6625, -0.9766],
        [-0.6527, -0.9766],
        [-0.6429, -0.9766],
        [-0.6330, -0.9766],
        [-0.6232, -0.9766],
        [-0.6134, -0.9766],
        [-0.6036, -0.9766],
        [-0.5938, -0.9766],
        [-0.5840, -0.9766],
        [-0.5742, -0.9766],
        [-0.5643, -0.9766],
        [-0.5545, -0.9766],
        [-0.5447, -0.9766],
        [-0.5349, -0.9766],
        [-0.5251, -0.9766],
        [-0.5153, -0.9766],
        [-0.5055, -0.9766],
        [-0.4956, -0.9766],
        [-0.4858, -0.9766],
        [-0.4760, -0.9766],
        [-0.4662, -0.9766],
        [-0.4564, -0.9766],
        [-0.4466, -0.9766],
        [-0.4368, -0.9766],
        [-0.4269, -0.9766],
        [-0.4171, -0.9766],
        [-0.4073, -0.9766],
        [-0.3975, -0.9766],
        [-0.3877, -0.9766],
        [-0.3779, -0.9766],
        [-0.3681, -0.9766],
        [-0.3582, -0.9766],
        [-0.3484, -0.9766],
        [-0.3386, -0.9766],
        [-0.3288, -0.9766],
        [-0.3190, -0.9766],
        [-0.3092, -0.9766],
        [-0.2993, -0.9766],
        [-0.2895, -0.9766],
        [-0.2797, -0.9766],
        [-0.2699, -0.9766],
        [-0.2601, -0.9766],
        [-0.2503, -0.9766],
        [-0.2405, -0.9766],
        [-0.2306, -0.9766],
        [-0.2208, -0.9766],
        [-0.2110, -0.9766],
        [-0.2012, -0.9766],
        [-0.1914, -0.9766],
        [-0.1816, -0.9766],
        [-0.1718, -0.9766],
        [-0.1619, -0.9766],
        [-0.1521, -0.9766],
        [-0.1423, -0.9766],
        [-0.1325, -0.9766],
        [-0.1227, -0.9766],
        [-0.1129, -0.9766],
        [-0.1031, -0.9766],
        [-0.0932, -0.9766],
        [-0.0834, -0.9766],
        [-0.0736, -0.9766],
        [-0.0638, -0.9766],
        [-0.0540, -0.9766],
        [-0.0442, -0.9766],
        [-0.0344, -0.9766],
        [-0.0245, -0.9766],
        [-0.0147, -0.9766],
        [-0.0049, -0.9766],
        [ 0.0049, -0.9766],
        [ 0.0147, -0.9766],
        [ 0.0245, -0.9766],
        [ 0.0344, -0.9766],
        [ 0.0442, -0.9766],
        [ 0.0540, -0.9766],
        [ 0.0638, -0.9766],
        [ 0.0736, -0.9766],
        [ 0.0834, -0.9766],
        [ 0.0932, -0.9766],
        [ 0.1031, -0.9766],
        [ 0.1129, -0.9766],
        [ 0.1227, -0.9766],
        [ 0.1325, -0.9766],
        [ 0.1423, -0.9766],
        [ 0.1521, -0.9766],
        [ 0.1619, -0.9766],
        [ 0.1718, -0.9766],
        [ 0.1816, -0.9766],
        [ 0.1914, -0.9766],
        [ 0.2012, -0.9766],
        [ 0.2110, -0.9766],
        [ 0.2208, -0.9766],
        [ 0.2306, -0.9766],
        [ 0.2405, -0.9766],
        [ 0.2503, -0.9766],
        [ 0.2601, -0.9766],
        [ 0.2699, -0.9766],
        [ 0.2797, -0.9766],
        [ 0.2895, -0.9766],
        [ 0.2993, -0.9766],
        [ 0.3092, -0.9766],
        [ 0.3190, -0.9766],
        [ 0.3288, -0.9766],
        [ 0.3386, -0.9766],
        [ 0.3484, -0.9766],
        [ 0.3582, -0.9766],
        [ 0.3681, -0.9766],
        [ 0.3779, -0.9766],
        [ 0.3877, -0.9766],
        [ 0.3975, -0.9766],
        [ 0.4073, -0.9766],
        [ 0.4171, -0.9766],
        [ 0.4269, -0.9766],
        [ 0.4368, -0.9766],
        [ 0.4466, -0.9766],
        [ 0.4564, -0.9766],
        [ 0.4662, -0.9766],
        [ 0.4760, -0.9766],
        [ 0.4858, -0.9766],
        [ 0.4956, -0.9766],
        [ 0.5055, -0.9766],
        [ 0.5153, -0.9766],
        [ 0.5251, -0.9766],
        [ 0.5349, -0.9766],
        [ 0.5447, -0.9766],
        [ 0.5545, -0.9766],
        [ 0.5643, -0.9766],
        [ 0.5742, -0.9766],
        [ 0.5840, -0.9766],
        [ 0.5938, -0.9766],
        [ 0.6036, -0.9766],
        [ 0.6134, -0.9766],
        [ 0.6232, -0.9766],
        [ 0.6330, -0.9766],
        [ 0.6429, -0.9766],
        [ 0.6527, -0.9766],
        [ 0.6625, -0.9766],
        [ 0.6723, -0.9766],
        [ 0.6821, -0.9766],
        [ 0.6919, -0.9766],
        [ 0.7018, -0.9766],
        [ 0.7116, -0.9766],
        [ 0.7214, -0.9766],
        [ 0.7312, -0.9766],
        [ 0.7410, -0.9766],
        [ 0.7508, -0.9766],
        [ 0.7606, -0.9766],
        [ 0.7705, -0.9766],
        [ 0.7803, -0.9766],
        [ 0.7901, -0.9766],
        [ 0.7999, -0.9766],
        [ 0.8097, -0.9766],
        [ 0.8195, -0.9766],
        [ 0.8293, -0.9766],
        [ 0.8392, -0.9766],
        [ 0.8490, -0.9766],
        [ 0.8588, -0.9766],
        [ 0.8686, -0.9766],
        [ 0.8784, -0.9766],
        [ 0.8882, -0.9766],
        [ 0.8980, -0.9766],
        [ 0.9079, -0.9766],
        [ 0.9177, -0.9766],
        [ 0.9275, -0.9766],
        [ 0.9373, -0.9766],
        [ 0.9471, -0.9766],
        [ 0.9569, -0.9766],
        [ 0.9667, -0.9766],
        [ 0.9766, -0.9766]])
(Pdb) tensor(-0.9766)
(Pdb)  60  	            return F.grid_sample(x, grid=grid, mode='bilinear', align_corners=True)
 61  	
 62  	# General layers
 63  	class MLP(nn.Module):
 64  	    """Very simple multi-layer perceptron (also called FFN)"""
 65  	
 66  	    def __init__(self, input_dim, hidden_dim, output_dim, num_layers):
 67  	        super().__init__()
 68  	        self.num_layers = num_layers
 69  	        h = [hidden_dim] * (num_layers - 1)
 70  	        self.layers = nn.ModuleList(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(57)forward()
-> grid = self.map_grid.unsqueeze(0).type_as(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(58)forward()
-> x).repeat(x.shape[0], 1, 1, 1)  # (b, h, w, 2)
(Pdb) 1
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(57)forward()
-> grid = self.map_grid.unsqueeze(0).type_as(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(58)forward()
-> x).repeat(x.shape[0], 1, 1, 1)  # (b, h, w, 2)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(57)forward()
-> grid = self.map_grid.unsqueeze(0).type_as(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(60)forward()
-> return F.grid_sample(x, grid=grid, mode='bilinear', align_corners=True)
(Pdb) torch.Size([1, 200, 200, 2])
(Pdb) torch.Size([1, 256, 200, 200])
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(60)forward()->tensor([[[[-0..., -0.1350]]]])
-> return F.grid_sample(x, grid=grid, mode='bilinear', align_corners=True)
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[[-0..., -0.1350]]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(202)forward()
-> base_state = self.bev_light_proj(base_state)
(Pdb) 197  	
198  	    def forward(self, x, ins_query):
199  	        base_state = rearrange(x, '(h w) b d -> b d h w', h=self.bev_size[0])
200  	
201  	        base_state = self.bev_sampler(base_state)
202  ->	        base_state = self.bev_light_proj(base_state)
203  	        base_state = self.base_downscale(base_state)
204  	        base_ins_query = ins_query
205  	
206  	        last_state = base_state
207  	        last_ins_query = base_ins_query
(Pdb) torch.Size([1, 256, 200, 200])
(Pdb) SimpleConv2d(
  (conv_layers): Sequential(
    (0): ConvModule(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (1): ConvModule(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (2): ConvModule(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
  )
)
init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(203)forward()
-> base_state = self.base_downscale(base_state)
(Pdb) torch.Size([1, 256, 200, 200])
(Pdb) Sequential(
  (0): Bottleneck(
    (layers): Sequential(
      (conv_down_project): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (abn_down_project): Sequential(
        (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
      )
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (abn): Sequential(
        (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
      )
      (conv_up_project): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (abn_up_project): Sequential(
        (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
      )
      (dropout): Dropout2d(p=0.0, inplace=False)
    )
    (projection): Sequential(
      (upsample_skip_proj): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (conv_skip_proj): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn_skip_proj): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (1): Bottleneck(
    (layers): Sequential(
      (conv_down_project): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (abn_down_project): Sequential(
        (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
      )
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (abn): Sequential(
        (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
      )
      (conv_up_project): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (abn_up_project): Sequential(
        (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
      )
      (dropout): Dropout2d(p=0.0, inplace=False)
    )
    (projection): Sequential(
      (upsample_skip_proj): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (conv_skip_proj): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn_skip_proj): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(204)forward()
-> base_ins_query = ins_query
(Pdb) 199  	        base_state = rearrange(x, '(h w) b d -> b d h w', h=self.bev_size[0])
200  	
201  	        base_state = self.bev_sampler(base_state)
202  	        base_state = self.bev_light_proj(base_state)
203  	        base_state = self.base_downscale(base_state)
204  ->	        base_ins_query = ins_query
205  	
206  	        last_state = base_state
207  	        last_ins_query = base_ins_query
208  	        future_states = []
209  	        mask_preds = []
(Pdb) torch.Size([1, 256, 50, 50])
(Pdb) torch.Size([1, 2, 256])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(206)forward()
-> last_state = base_state
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(207)forward()
-> last_ins_query = base_ins_query
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(208)forward()
-> future_states = []
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(209)forward()
-> mask_preds = []
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(210)forward()
-> temporal_query = []
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(211)forward()
-> temporal_embed_for_mask_attn = []
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(212)forward()
-> n_trans_layer_each_block = self.num_trans_layers // self.n_future_blocks
(Pdb) 5
(Pdb) 5
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(213)forward()
-> assert n_trans_layer_each_block >= 1
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(215)forward()
-> for i in range(self.n_future_blocks):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(217)forward()
-> cur_state = self.downscale_convs[i](last_state)  # /4 -> /8
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(221)forward()
-> cur_ins_query = self.temporal_mlps[i](last_ins_query)  # [b, q, d]
(Pdb) torch.Size([1, 256, 25, 25])
(Pdb) torch.Size([1, 2, 256])
(Pdb) ModuleList(
  (0): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
  (1): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
  (2): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
  (3): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
  (4): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
)
(Pdb) 216  	            # Downscale
217  	            cur_state = self.downscale_convs[i](last_state)  # /4 -> /8
218  	
219  	            # Attention
220  	            # temporal_aware ins_query
221  ->	            cur_ins_query = self.temporal_mlps[i](last_ins_query)  # [b, q, d]
222  	            temporal_query.append(cur_ins_query)
223  	
224  	            # Generate attn mask
225  	            attn_mask, mask_pred, cur_ins_emb_for_mask_attn = self.get_attn_mask(cur_state, cur_ins_query)
226  	            attn_masks = [None, attn_mask]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) *** NameError: name 'cur_ins_query' is not defined
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb)   /Users/liangming.xu/code/UniAD/tools/test.py(274)<module>()
-> main()
  /Users/liangming.xu/code/UniAD/tools/test.py(230)main()
-> result = model(return_loss=False, rescale=True, **data)
  /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()
-> return forward_call(*input, **kwargs)
  /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_e2e.py(83)forward()
-> return self.forward_test(**kwargs)
  /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_e2e.py(311)forward_test()
-> outs_occ = self.occ_head.forward_test(
  /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(431)forward_test()
-> _, pred_ins_logits = self(bev_feat, ins_query=ins_query)
  /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()
-> return forward_call(*input, **kwargs)
  /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(221)forward()
-> cur_ins_query = self.temporal_mlps[i](last_ins_query)  # [b, q, d]
  /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()
-> return forward_call(*input, **kwargs)
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) 2
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) torch.Size([1, 2, 256])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) torch.Size([1, 2, 256])
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[ 0....5,  0.0930]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[ 0....5,  0.0930]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(222)forward()
-> temporal_query.append(cur_ins_query)
(Pdb) *** AttributeError: 'MLP' object has no attribute 'shape'
(Pdb) MLP(
  (layers): ModuleList(
    (0): Linear(in_features=256, out_features=256, bias=True)
    (1): Linear(in_features=256, out_features=256, bias=True)
    (2): Linear(in_features=256, out_features=256, bias=True)
  )
)
(Pdb) 217  	            cur_state = self.downscale_convs[i](last_state)  # /4 -> /8
218  	
219  	            # Attention
220  	            # temporal_aware ins_query
221  	            cur_ins_query = self.temporal_mlps[i](last_ins_query)  # [b, q, d]
222  ->	            temporal_query.append(cur_ins_query)
223  	
224  	            # Generate attn mask
225  	            attn_mask, mask_pred, cur_ins_emb_for_mask_attn = self.get_attn_mask(cur_state, cur_ins_query)
226  	            attn_masks = [None, attn_mask]
227  	
(Pdb) *** Newest frame
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(225)forward()
-> attn_mask, mask_pred, cur_ins_emb_for_mask_attn = self.get_attn_mask(cur_state, cur_ins_query)
(Pdb) --Call--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(173)get_attn_mask()
-> def get_attn_mask(self, state, ins_query):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(176)get_attn_mask()
-> ins_embed = self.temporal_mlp_for_mask(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(177)get_attn_mask()
-> ins_query
(Pdb) *** NameError: name 'ins_embed' is not defined
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(176)get_attn_mask()
-> ins_embed = self.temporal_mlp_for_mask(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) *** NameError: name 'ins_embed' is not defined
(Pdb) *** NameError: name 'ins_embed' is not defined
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) ModuleList(
  (0): Linear(in_features=256, out_features=256, bias=True)
  (1): Linear(in_features=256, out_features=256, bias=True)
  (2): Linear(in_features=256, out_features=256, bias=True)
)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) torch.Size([1, 2, 256])
(Pdb)  73  	
 74  	    def forward(self, x):
 75  	        import pdb; pdb.set_trace()
 76  	        for i, layer in enumerate(self.layers):
 77  	            x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
 78  ->	        return x
 79  	
 80  	class SimpleConv2d(BaseModule):
 81  	    def __init__(self, in_channels,
 82  	                       out_channels,
 83  	
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[ 1....1.8515e+00]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[ 1....1.8515e+00]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(179)get_attn_mask()
-> mask_pred = torch.einsum("bqc,bchw->bqhw", ins_embed, state)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(180)get_attn_mask()
-> attn_mask = mask_pred.sigmoid() < self.attn_mask_thresh
(Pdb) torch.Size([1, 2, 25, 25])
(Pdb) torch.Size([1, 2, 256])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) torch.Size([1, 2, 25, 25])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(183)get_attn_mask()
-> attn_mask = attn_mask.detach()
(Pdb) torch.Size([8, 625, 2])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) torch.Size([8, 625, 2])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(190)get_attn_mask()
-> mask_pred,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(191)get_attn_mask()
-> self.bev_size,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(192)get_attn_mask()
-> mode='bilinear',
(Pdb) (200, 200)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(193)get_attn_mask()
-> align_corners=False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) torch.Size([1, 2, 200, 200])
(Pdb) torch.Size([8, 625, 2])
(Pdb) 191  	            self.bev_size,
192  	            mode='bilinear',
193  	            align_corners=False
194  	        )  # Supervised by gt
195  	
196  ->	        return attn_mask, upsampled_mask_pred, ins_embed
197  	
198  	    def forward(self, x, ins_query):
199  	        base_state = rearrange(x, '(h w) b d -> b d h w', h=self.bev_size[0])
200  	
201  	        base_state = self.bev_sampler(base_state)
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()->(tensor([[[Fal...lse, False]]]), tensor([[[[-1... -96.5808]]]]), tensor([[[ 1....1.8515e+00]]]))
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(226)forward()
-> attn_masks = [None, attn_mask]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(228)forward()
-> mask_preds.append(mask_pred)  # /1
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(229)forward()
-> temporal_embed_for_mask_attn.append(cur_ins_emb_for_mask_attn)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(231)forward()
-> cur_state = rearrange(cur_state, 'b c h w -> (h w) b c')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(232)forward()
-> cur_ins_query = rearrange(cur_ins_query, 'b q c -> q b c')
(Pdb) torch.Size([625, 1, 256])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) torch.Size([2, 1, 256])
(Pdb) 1
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(235)forward()
-> trans_layer_ind = i * n_trans_layer_each_block + j
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(236)forward()
-> trans_layer = self.transformer_decoder.layers[trans_layer_ind]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) DetrTransformerDecoderLayer(
  (attentions): ModuleList(
    (0): MultiheadAttention(
      (attn): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
      )
      (proj_drop): Dropout(p=0.0, inplace=False)
      (dropout_layer): Identity()
    )
    (1): MultiheadAttention(
      (attn): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
      )
      (proj_drop): Dropout(p=0.0, inplace=False)
      (dropout_layer): Identity()
    )
  )
  (ffns): ModuleList(
    (0): FFN(
      (activate): ReLU(inplace=True)
      (layers): Sequential(
        (0): Sequential(
          (0): Linear(in_features=256, out_features=2048, bias=True)
          (1): ReLU(inplace=True)
          (2): Dropout(p=0.0, inplace=False)
        )
        (1): Linear(in_features=2048, out_features=256, bias=True)
        (2): Dropout(p=0.0, inplace=False)
      )
      (dropout_layer): Identity()
    )
  )
  (norms): ModuleList(
    (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  )
)
(Pdb) 232  	            cur_ins_query = rearrange(cur_ins_query, 'b q c -> q b c')
233  	
234  	            for j in range(n_trans_layer_each_block):
235  	                trans_layer_ind = i * n_trans_layer_each_block + j
236  	                trans_layer = self.transformer_decoder.layers[trans_layer_ind]
237  ->	                cur_state = trans_layer(
238  	                    query=cur_state,  # [h'*w', b, c]
239  	                    key=cur_ins_query,  # [nq, b, c]
240  	                    value=cur_ins_query,  # [nq, b, c]
241  	                    query_pos=None,
242  	                    key_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(238)forward()
-> query=cur_state,  # [h'*w', b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(239)forward()
-> key=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(240)forward()
-> value=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(241)forward()
-> query_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(242)forward()
-> key_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(243)forward()
-> attn_masks=attn_masks,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(244)forward()
-> query_key_padding_mask=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(245)forward()
-> key_padding_mask=None
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) --Call--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1045)_call_impl()
-> def _call_impl(self, *input, **kwargs):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1046)_call_impl()
-> forward_call = (self._slow_forward if torch._C._get_tracing_state() else self.forward)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1049)_call_impl()
-> if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1050)_call_impl()
-> or _global_forward_hooks or _global_forward_pre_hooks):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1049)_call_impl()
-> if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1050)_call_impl()
-> or _global_forward_hooks or _global_forward_pre_hooks):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1049)_call_impl()
-> if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()
-> return forward_call(*input, **kwargs)
(Pdb) --Call--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(412)forward()
-> def forward(self,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(453)forward()
-> norm_index = 0
(Pdb) 448  	
449  	        Returns:
450  	            Tensor: forwarded results with shape [num_queries, bs, embed_dims].
451  	        """
452  	
453  ->	        norm_index = 0
454  	        attn_index = 0
455  	        ffn_index = 0
456  	        identity = query
457  	        if attn_masks is None:
458  	            attn_masks = [None for _ in range(self.num_attn)]
(Pdb) torch.Size([2, 1, 256])
(Pdb) torch.Size([2, 1, 256])
(Pdb) torch.Size([625, 1, 256])
(Pdb) 459  	        elif isinstance(attn_masks, torch.Tensor):
460  	            attn_masks = [
461  	                copy.deepcopy(attn_masks) for _ in range(self.num_attn)
462  	            ]
463  	            warnings.warn(f'Use same attn_mask in all attentions in '
464  	                          f'{self.__class__.__name__} ')
465  	        else:
466  	            assert len(attn_masks) == self.num_attn, f'The length of ' \
467  	                        f'attn_masks {len(attn_masks)} must be equal ' \
468  	                        f'to the number of attention in ' \
469  	                        f'operation_order {self.num_attn}'
(Pdb) *** AttributeError: 'list' object has no attribute 'shape'
(Pdb) *** AttributeError: 'NoneType' object has no attribute 'shape'
(Pdb) 2
(Pdb) torch.Size([8, 625, 2])
(Pdb) 470  	
471  	        for layer in self.operation_order:
472  	            if layer == 'self_attn':
473  	                temp_key = temp_value = query
474  	                query = self.attentions[attn_index](
475  	                    query,
476  	                    temp_key,
477  	                    temp_value,
478  	                    identity if self.pre_norm else None,
479  	                    query_pos=query_pos,
480  	                    key_pos=query_pos,
(Pdb) *** Newest frame
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(454)forward()
-> attn_index = 0
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(455)forward()
-> ffn_index = 0
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(456)forward()
-> identity = query
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(457)forward()
-> if attn_masks is None:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(459)forward()
-> elif isinstance(attn_masks, torch.Tensor):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(466)forward()
-> assert len(attn_masks) == self.num_attn, f'The length of ' \
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(471)forward()
-> for layer in self.operation_order:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(472)forward()
-> if layer == 'self_attn':
(Pdb) DetrTransformerDecoderLayer(
  (attentions): ModuleList(
    (0): MultiheadAttention(
      (attn): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
      )
      (proj_drop): Dropout(p=0.0, inplace=False)
      (dropout_layer): Identity()
    )
    (1): MultiheadAttention(
      (attn): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
      )
      (proj_drop): Dropout(p=0.0, inplace=False)
      (dropout_layer): Identity()
    )
  )
  (ffns): ModuleList(
    (0): FFN(
      (activate): ReLU(inplace=True)
      (layers): Sequential(
        (0): Sequential(
          (0): Linear(in_features=256, out_features=2048, bias=True)
          (1): ReLU(inplace=True)
          (2): Dropout(p=0.0, inplace=False)
        )
        (1): Linear(in_features=2048, out_features=256, bias=True)
        (2): Dropout(p=0.0, inplace=False)
      )
      (dropout_layer): Identity()
    )
  )
  (norms): ModuleList(
    (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  )
)
(Pdb) 467  	                        f'attn_masks {len(attn_masks)} must be equal ' \
468  	                        f'to the number of attention in ' \
469  	                        f'operation_order {self.num_attn}'
470  	
471  	        for layer in self.operation_order:
472  ->	            if layer == 'self_attn':
473  	                temp_key = temp_value = query
474  	                query = self.attentions[attn_index](
475  	                    query,
476  	                    temp_key,
477  	                    temp_value,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(473)forward()
-> temp_key = temp_value = query
(Pdb) 'self_attn'
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(474)forward()
-> query = self.attentions[attn_index](
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(475)forward()
-> query,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(476)forward()
-> temp_key,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(477)forward()
-> temp_value,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(478)forward()
-> identity if self.pre_norm else None,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(474)forward()
-> query = self.attentions[attn_index](
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(479)forward()
-> query_pos=query_pos,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(480)forward()
-> key_pos=query_pos,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(481)forward()
-> attn_mask=attn_masks[attn_index],
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(482)forward()
-> key_padding_mask=query_key_padding_mask,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(474)forward()
-> query = self.attentions[attn_index](
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(483)forward()
-> **kwargs)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(474)forward()
-> query = self.attentions[attn_index](
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(484)forward()
-> attn_index += 1
(Pdb) torch.Size([625, 1, 256])
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(485)forward()
-> identity = query
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(471)forward()
-> for layer in self.operation_order:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(472)forward()
-> if layer == 'self_attn':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(487)forward()
-> elif layer == 'norm':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(488)forward()
-> query = self.norms[norm_index](query)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(489)forward()
-> norm_index += 1
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(471)forward()
-> for layer in self.operation_order:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(472)forward()
-> if layer == 'self_attn':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(487)forward()
-> elif layer == 'norm':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(491)forward()
-> elif layer == 'cross_attn':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(492)forward()
-> query = self.attentions[attn_index](
(Pdb) 487  	            elif layer == 'norm':
488  	                query = self.norms[norm_index](query)
489  	                norm_index += 1
490  	
491  	            elif layer == 'cross_attn':
492  ->	                query = self.attentions[attn_index](
493  	                    query,
494  	                    key,
495  	                    value,
496  	                    identity if self.pre_norm else None,
497  	                    query_pos=query_pos,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(493)forward()
-> query,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(494)forward()
-> key,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(495)forward()
-> value,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(496)forward()
-> identity if self.pre_norm else None,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(492)forward()
-> query = self.attentions[attn_index](
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(497)forward()
-> query_pos=query_pos,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(498)forward()
-> key_pos=key_pos,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(499)forward()
-> attn_mask=attn_masks[attn_index],
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(500)forward()
-> key_padding_mask=key_padding_mask,
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(492)forward()
-> query = self.attentions[attn_index](
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(501)forward()
-> **kwargs)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(492)forward()
-> query = self.attentions[attn_index](
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(502)forward()
-> attn_index += 1
(Pdb) torch.Size([625, 1, 256])
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(503)forward()
-> identity = query
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(471)forward()
-> for layer in self.operation_order:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(472)forward()
-> if layer == 'self_attn':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(487)forward()
-> elif layer == 'norm':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(488)forward()
-> query = self.norms[norm_index](query)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(489)forward()
-> norm_index += 1
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(471)forward()
-> for layer in self.operation_order:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(472)forward()
-> if layer == 'self_attn':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(487)forward()
-> elif layer == 'norm':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(491)forward()
-> elif layer == 'cross_attn':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(505)forward()
-> elif layer == 'ffn':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(506)forward()
-> query = self.ffns[ffn_index](
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(507)forward()
-> query, identity if self.pre_norm else None)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(506)forward()
-> query = self.ffns[ffn_index](
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(508)forward()
-> ffn_index += 1
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(471)forward()
-> for layer in self.operation_order:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(472)forward()
-> if layer == 'self_attn':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(487)forward()
-> elif layer == 'norm':
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(488)forward()
-> query = self.norms[norm_index](query)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(489)forward()
-> norm_index += 1
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(471)forward()
-> for layer in self.operation_order:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(510)forward()
-> return query
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py(510)forward()->tensor([[[ 1....6, -0.5600]]])
-> return query
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[ 1....6, -0.5600]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(248)forward()
-> cur_state = rearrange(cur_state, '(h w) b c -> b c h w', h=self.bev_size[0]//8)
(Pdb) 243  	                    attn_masks=attn_masks,
244  	                    query_key_padding_mask=None,
245  	                    key_padding_mask=None
246  	                )  # out size: [h'*w', b, c]
247  	
248  ->	            cur_state = rearrange(cur_state, '(h w) b c -> b c h w', h=self.bev_size[0]//8)
249  	
250  	            # Upscale to /4
251  	            cur_state = self.upsample_adds[i](cur_state, last_state)
252  	
253  	            # Out
(Pdb) torch.Size([625, 1, 256])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(251)forward()
-> cur_state = self.upsample_adds[i](cur_state, last_state)
(Pdb) torch.Size([1, 256, 25, 25])
(Pdb) torch.Size([1, 256, 25, 25])
(Pdb) torch.Size([1, 256, 50, 50])
(Pdb) --Call--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1117)__getattr__()
-> def __getattr__(self, name: str) -> Union[Tensor, 'Module']:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1118)__getattr__()
-> if '_parameters' in self.__dict__:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1119)__getattr__()
-> _parameters = self.__dict__['_parameters']
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1120)__getattr__()
-> if name in _parameters:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1122)__getattr__()
-> if '_buffers' in self.__dict__:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1123)__getattr__()
-> _buffers = self.__dict__['_buffers']
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1124)__getattr__()
-> if name in _buffers:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1126)__getattr__()
-> if '_modules' in self.__dict__:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1127)__getattr__()
-> modules = self.__dict__['_modules']
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1128)__getattr__()
-> if name in modules:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1129)__getattr__()
-> return modules[name]
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1129)__getattr__()->ModuleList(
 ...e)
    )
  )
)
-> return modules[name]
(Pdb) --Call--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(181)__getitem__()
-> @_copy_to_script_wrapper
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(183)__getitem__()
-> if isinstance(idx, slice):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(186)__getitem__()
-> return self._modules[self._get_abs_string_index(idx)]
(Pdb) --Call--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(172)_get_abs_string_index()
-> def _get_abs_string_index(self, idx):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(174)_get_abs_string_index()
-> idx = operator.index(idx)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(175)_get_abs_string_index()
-> if not (-len(self) <= idx < len(self)):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(177)_get_abs_string_index()
-> if idx < 0:
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(179)_get_abs_string_index()
-> return str(idx)
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(179)_get_abs_string_index()->'0'
-> return str(idx)
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/container.py(186)__getitem__()->UpsamplingAdd...ts=True)
  )
)
-> return self._modules[self._get_abs_string_index(idx)]
(Pdb) --Call--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1045)_call_impl()
-> def _call_impl(self, *input, **kwargs):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1046)_call_impl()
-> forward_call = (self._slow_forward if torch._C._get_tracing_state() else self.forward)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1049)_call_impl()
-> if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1050)_call_impl()
-> or _global_forward_hooks or _global_forward_pre_hooks):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1049)_call_impl()
-> if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1050)_call_impl()
-> or _global_forward_hooks or _global_forward_pre_hooks):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1049)_call_impl()
-> if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()
-> return forward_call(*input, **kwargs)
(Pdb) --Call--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(229)forward()
-> def forward(self, x, x_skip):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(230)forward()
-> x = self.upsample_layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(231)forward()
-> return x + x_skip
(Pdb) torch.Size([1, 256, 50, 50])
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(231)forward()->tensor([[[[-0..., -4.7997]]]])
-> return x + x_skip
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[[-0..., -4.7997]]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(254)forward()
-> future_states.append(cur_state)  # [b, d, h/4, w/4]
(Pdb) 249  	
250  	            # Upscale to /4
251  	            cur_state = self.upsample_adds[i](cur_state, last_state)
252  	
253  	            # Out
254  ->	            future_states.append(cur_state)  # [b, d, h/4, w/4]
255  	            last_state = cur_state
256  	
257  	        future_states = torch.stack(future_states, dim=1)  # [b, t, d, h/4, w/4]
258  	        temporal_query = torch.stack(temporal_query, dim=1)  # [b, t, q, d]
259  	        mask_preds = torch.stack(mask_preds, dim=2)  # [b, q, t, h, w]
(Pdb) torch.Size([1, 256, 50, 50])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(255)forward()
-> last_state = cur_state
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(215)forward()
-> for i in range(self.n_future_blocks):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(217)forward()
-> cur_state = self.downscale_convs[i](last_state)  # /4 -> /8
(Pdb) 5
(Pdb) torch.Size([1, 256, 50, 50])
(Pdb) CVT_Decoder(
  (layers): Sequential(
    (0): CVT_DecoderBlock(
      (conv): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU(inplace=True)
        (4): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (5): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (up): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (relu): ReLU(inplace=True)
    )
    (1): CVT_DecoderBlock(
      (conv): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU(inplace=True)
        (4): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (5): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (up): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
(Pdb) 212  	        n_trans_layer_each_block = self.num_trans_layers // self.n_future_blocks
213  	        assert n_trans_layer_each_block >= 1
214  	
215  	        for i in range(self.n_future_blocks):
216  	            # Downscale
217  ->	            cur_state = self.downscale_convs[i](last_state)  # /4 -> /8
218  	
219  	            # Attention
220  	            # temporal_aware ins_query
221  	            cur_ins_query = self.temporal_mlps[i](last_ins_query)  # [b, q, d]
222  	            temporal_query.append(cur_ins_query)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(221)forward()
-> cur_ins_query = self.temporal_mlps[i](last_ins_query)  # [b, q, d]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) (Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb)  72  	        )
 73  	
 74  	    def forward(self, x):
 75  	        import pdb; pdb.set_trace()
 76  	        for i, layer in enumerate(self.layers):
 77  ->	            x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
 78  	        return x
 79  	
 80  	class SimpleConv2d(BaseModule):
 81  	    def __init__(self, in_channels,
 82  	                       out_channels,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[ 2....6.2640e-01]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[ 2....6.2640e-01]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(222)forward()
-> temporal_query.append(cur_ins_query)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(225)forward()
-> attn_mask, mask_pred, cur_ins_emb_for_mask_attn = self.get_attn_mask(cur_state, cur_ins_query)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[-4....1.7313e+00]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[-4....1.7313e+00]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(179)get_attn_mask()
-> mask_pred = torch.einsum("bqc,bchw->bqhw", ins_embed, state)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(180)get_attn_mask()
-> attn_mask = mask_pred.sigmoid() < self.attn_mask_thresh
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(183)get_attn_mask()
-> attn_mask = attn_mask.detach()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(190)get_attn_mask()
-> mask_pred,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(191)get_attn_mask()
-> self.bev_size,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(192)get_attn_mask()
-> mode='bilinear',
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(193)get_attn_mask()
-> align_corners=False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()->(tensor([[[Fal...lse, False]]]), tensor([[[[ -... -81.6315]]]]), tensor([[[-4....1.7313e+00]]]))
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(226)forward()
-> attn_masks = [None, attn_mask]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(228)forward()
-> mask_preds.append(mask_pred)  # /1
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(229)forward()
-> temporal_embed_for_mask_attn.append(cur_ins_emb_for_mask_attn)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(231)forward()
-> cur_state = rearrange(cur_state, 'b c h w -> (h w) b c')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(232)forward()
-> cur_ins_query = rearrange(cur_ins_query, 'b q c -> q b c')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(235)forward()
-> trans_layer_ind = i * n_trans_layer_each_block + j
(Pdb) *** The 'jump' command requires a line number
(Pdb) 0
(Pdb) 1
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(236)forward()
-> trans_layer = self.transformer_decoder.layers[trans_layer_ind]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(238)forward()
-> query=cur_state,  # [h'*w', b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(239)forward()
-> key=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(240)forward()
-> value=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(241)forward()
-> query_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(242)forward()
-> key_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(243)forward()
-> attn_masks=attn_masks,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(244)forward()
-> query_key_padding_mask=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(245)forward()
-> key_padding_mask=None
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(248)forward()
-> cur_state = rearrange(cur_state, '(h w) b c -> b c h w', h=self.bev_size[0]//8)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(251)forward()
-> cur_state = self.upsample_adds[i](cur_state, last_state)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(254)forward()
-> future_states.append(cur_state)  # [b, d, h/4, w/4]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(255)forward()
-> last_state = cur_state
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(215)forward()
-> for i in range(self.n_future_blocks):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(217)forward()
-> cur_state = self.downscale_convs[i](last_state)  # /4 -> /8
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(221)forward()
-> cur_ins_query = self.temporal_mlps[i](last_ins_query)  # [b, q, d]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[-2....6.5920e-01]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[-2....6.5920e-01]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(222)forward()
-> temporal_query.append(cur_ins_query)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(225)forward()
-> attn_mask, mask_pred, cur_ins_emb_for_mask_attn = self.get_attn_mask(cur_state, cur_ins_query)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[-5....1.4557e+00]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[-5....1.4557e+00]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(179)get_attn_mask()
-> mask_pred = torch.einsum("bqc,bchw->bqhw", ins_embed, state)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(180)get_attn_mask()
-> attn_mask = mask_pred.sigmoid() < self.attn_mask_thresh
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(183)get_attn_mask()
-> attn_mask = attn_mask.detach()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(190)get_attn_mask()
-> mask_pred,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(191)get_attn_mask()
-> self.bev_size,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(192)get_attn_mask()
-> mode='bilinear',
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(193)get_attn_mask()
-> align_corners=False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()->(tensor([[[Fal...lse, False]]]), tensor([[[[ -... -42.5195]]]]), tensor([[[-5....1.4557e+00]]]))
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(226)forward()
-> attn_masks = [None, attn_mask]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(228)forward()
-> mask_preds.append(mask_pred)  # /1
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(229)forward()
-> temporal_embed_for_mask_attn.append(cur_ins_emb_for_mask_attn)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(231)forward()
-> cur_state = rearrange(cur_state, 'b c h w -> (h w) b c')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(232)forward()
-> cur_ins_query = rearrange(cur_ins_query, 'b q c -> q b c')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(235)forward()
-> trans_layer_ind = i * n_trans_layer_each_block + j
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(236)forward()
-> trans_layer = self.transformer_decoder.layers[trans_layer_ind]
(Pdb) 2
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(238)forward()
-> query=cur_state,  # [h'*w', b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(239)forward()
-> key=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(240)forward()
-> value=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(241)forward()
-> query_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(242)forward()
-> key_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(243)forward()
-> attn_masks=attn_masks,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(244)forward()
-> query_key_padding_mask=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(245)forward()
-> key_padding_mask=None
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(248)forward()
-> cur_state = rearrange(cur_state, '(h w) b c -> b c h w', h=self.bev_size[0]//8)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(251)forward()
-> cur_state = self.upsample_adds[i](cur_state, last_state)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(254)forward()
-> future_states.append(cur_state)  # [b, d, h/4, w/4]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(255)forward()
-> last_state = cur_state
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(215)forward()
-> for i in range(self.n_future_blocks):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(217)forward()
-> cur_state = self.downscale_convs[i](last_state)  # /4 -> /8
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(221)forward()
-> cur_ins_query = self.temporal_mlps[i](last_ins_query)  # [b, q, d]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) (Pdb) (Pdb) (Pdb) (Pdb) (Pdb) (Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[ 2....6.1269e-01]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[ 2....6.1269e-01]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(222)forward()
-> temporal_query.append(cur_ins_query)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(225)forward()
-> attn_mask, mask_pred, cur_ins_emb_for_mask_attn = self.get_attn_mask(cur_state, cur_ins_query)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) (Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[-4....1.7662e+00]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[-4....1.7662e+00]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(179)get_attn_mask()
-> mask_pred = torch.einsum("bqc,bchw->bqhw", ins_embed, state)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(180)get_attn_mask()
-> attn_mask = mask_pred.sigmoid() < self.attn_mask_thresh
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(183)get_attn_mask()
-> attn_mask = attn_mask.detach()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(190)get_attn_mask()
-> mask_pred,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(191)get_attn_mask()
-> self.bev_size,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(192)get_attn_mask()
-> mode='bilinear',
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(193)get_attn_mask()
-> align_corners=False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()->(tensor([[[Fal...lse, False]]]), tensor([[[[-3... -52.7045]]]]), tensor([[[-4....1.7662e+00]]]))
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(226)forward()
-> attn_masks = [None, attn_mask]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(228)forward()
-> mask_preds.append(mask_pred)  # /1
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(229)forward()
-> temporal_embed_for_mask_attn.append(cur_ins_emb_for_mask_attn)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(231)forward()
-> cur_state = rearrange(cur_state, 'b c h w -> (h w) b c')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(232)forward()
-> cur_ins_query = rearrange(cur_ins_query, 'b q c -> q b c')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(235)forward()
-> trans_layer_ind = i * n_trans_layer_each_block + j
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(236)forward()
-> trans_layer = self.transformer_decoder.layers[trans_layer_ind]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(238)forward()
-> query=cur_state,  # [h'*w', b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(239)forward()
-> key=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(240)forward()
-> value=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(241)forward()
-> query_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(242)forward()
-> key_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(243)forward()
-> attn_masks=attn_masks,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(244)forward()
-> query_key_padding_mask=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(245)forward()
-> key_padding_mask=None
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(248)forward()
-> cur_state = rearrange(cur_state, '(h w) b c -> b c h w', h=self.bev_size[0]//8)
(Pdb) 3
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(251)forward()
-> cur_state = self.upsample_adds[i](cur_state, last_state)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(254)forward()
-> future_states.append(cur_state)  # [b, d, h/4, w/4]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(255)forward()
-> last_state = cur_state
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(215)forward()
-> for i in range(self.n_future_blocks):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(217)forward()
-> cur_state = self.downscale_convs[i](last_state)  # /4 -> /8
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(221)forward()
-> cur_ins_query = self.temporal_mlps[i](last_ins_query)  # [b, q, d]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb)  73  	
 74  	    def forward(self, x):
 75  	        #import pdb; pdb.set_trace()
 76  	        for i, layer in enumerate(self.layers):
 77  	            x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
 78  ->	        return x
 79  	
 80  	class SimpleConv2d(BaseModule):
 81  	    def __init__(self, in_channels,
 82  	                       out_channels,
 83  	
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[-1....1.3245e+00]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[-1....1.3245e+00]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(222)forward()
-> temporal_query.append(cur_ins_query)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(225)forward()
-> attn_mask, mask_pred, cur_ins_emb_for_mask_attn = self.get_attn_mask(cur_state, cur_ins_query)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) 0
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[-1....1.5880e+00]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[-1....1.5880e+00]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(179)get_attn_mask()
-> mask_pred = torch.einsum("bqc,bchw->bqhw", ins_embed, state)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(180)get_attn_mask()
-> attn_mask = mask_pred.sigmoid() < self.attn_mask_thresh
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(182)get_attn_mask()
-> 1, self.num_heads, 1, 1).flatten(0, 1)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(181)get_attn_mask()
-> attn_mask = rearrange(attn_mask, 'b q h w -> b (h w) q').unsqueeze(1).repeat(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(183)get_attn_mask()
-> attn_mask = attn_mask.detach()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(187)get_attn_mask()
-> attn_mask.sum(-1) == attn_mask.shape[-1])] = False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(186)get_attn_mask()
-> attn_mask[torch.where(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(190)get_attn_mask()
-> mask_pred,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(191)get_attn_mask()
-> self.bev_size,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(192)get_attn_mask()
-> mode='bilinear',
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(193)get_attn_mask()
-> align_corners=False
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(189)get_attn_mask()
-> upsampled_mask_pred = F.interpolate(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(196)get_attn_mask()->(tensor([[[Fal...lse, False]]]), tensor([[[[ -... -51.7161]]]]), tensor([[[-1....1.5880e+00]]]))
-> return attn_mask, upsampled_mask_pred, ins_embed
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(226)forward()
-> attn_masks = [None, attn_mask]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(228)forward()
-> mask_preds.append(mask_pred)  # /1
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(229)forward()
-> temporal_embed_for_mask_attn.append(cur_ins_emb_for_mask_attn)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(231)forward()
-> cur_state = rearrange(cur_state, 'b c h w -> (h w) b c')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(232)forward()
-> cur_ins_query = rearrange(cur_ins_query, 'b q c -> q b c')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(235)forward()
-> trans_layer_ind = i * n_trans_layer_each_block + j
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(236)forward()
-> trans_layer = self.transformer_decoder.layers[trans_layer_ind]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(238)forward()
-> query=cur_state,  # [h'*w', b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(239)forward()
-> key=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(240)forward()
-> value=cur_ins_query,  # [nq, b, c]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(241)forward()
-> query_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(242)forward()
-> key_pos=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(243)forward()
-> attn_masks=attn_masks,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(244)forward()
-> query_key_padding_mask=None,
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(245)forward()
-> key_padding_mask=None
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(237)forward()
-> cur_state = trans_layer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(234)forward()
-> for j in range(n_trans_layer_each_block):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(248)forward()
-> cur_state = rearrange(cur_state, '(h w) b c -> b c h w', h=self.bev_size[0]//8)
(Pdb) 4
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(251)forward()
-> cur_state = self.upsample_adds[i](cur_state, last_state)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(254)forward()
-> future_states.append(cur_state)  # [b, d, h/4, w/4]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(255)forward()
-> last_state = cur_state
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(215)forward()
-> for i in range(self.n_future_blocks):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(257)forward()
-> future_states = torch.stack(future_states, dim=1)  # [b, t, d, h/4, w/4]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(258)forward()
-> temporal_query = torch.stack(temporal_query, dim=1)  # [b, t, q, d]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(259)forward()
-> mask_preds = torch.stack(mask_preds, dim=2)  # [b, q, t, h, w]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(260)forward()
-> ins_query = torch.stack(temporal_embed_for_mask_attn, dim=1)  # [b, t, q, d]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(263)forward()
-> future_states = self.dense_decoder(future_states)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(206)forward()
-> b, t = x.size(0), x.size(1)
(Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(207)forward()
-> x = rearrange(x, 'b t c h w -> (b t) c h w')
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(208)forward()
-> y = x
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(209)forward()
-> for layer in self.layers:
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(210)forward()
-> if self.use_checkpoint:
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(213)forward()
-> y = layer(y, x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(209)forward()
-> for layer in self.layers:
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(210)forward()
-> if self.use_checkpoint:
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(213)forward()
-> y = layer(y, x)
(Pdb) 208  	        y = x
209  	        for layer in self.layers:
210  	            if self.use_checkpoint:
211  	                y = checkpoint(layer, y, x)
212  	            else:
213  ->	                y = layer(y, x)
214  	
215  	        y = rearrange(y, '(b t) c h w -> b t c h w', b=b, t=t)
216  	        return y
217  	
218  	
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(209)forward()
-> for layer in self.layers:
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(215)forward()
-> y = rearrange(y, '(b t) c h w -> b t c h w', b=b, t=t)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(216)forward()
-> return y
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(216)forward()->tensor([[[[[ ...4784e+00]]]]])
-> return y
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[[[ ...4784e+00]]]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(264)forward()
-> ins_occ_query = self.query_to_occ_feat(ins_query)    # [b, t, q, query_out_dim]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) (Pdb) (Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(77)forward()
-> x = F.relu(layer(x)) if i < self.num_layers - 1 else layer(x)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(76)forward()
-> for i, layer in enumerate(self.layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()
-> return x
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head_plugin/modules.py(78)forward()->tensor([[[[ 3....1285e-03]]]])
-> return x
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/nn/modules/module.py(1051)_call_impl()->tensor([[[[ 3....1285e-03]]]])
-> return forward_call(*input, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(267)forward()
-> ins_occ_logits = torch.einsum("btqc,btchw->bqthw", ins_occ_query, future_states)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/occ_head.py(269)forward()
-> return mask_preds, ins_occ_logits
(Pdb) torch.Size([1, 5, 256, 200, 200])
(Pdb) 