NOTE: Redirects are currently not supported in Windows or MacOs.
/opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/distributed/launch.py:163: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
  logger.warn(
The module torch.distributed.launch is deprecated and going to be removed in future.Migrate to torch.distributed.run
WARNING:torch.distributed.run:--use_env is deprecated and will be removed in future releases.
 Please read local_rank from `os.environ('LOCAL_RANK')` instead.
INFO:torch.distributed.launcher.api:Starting elastic_operator with launch configs:
  entrypoint       : ./tools/test.py
  min_nodes        : 1
  max_nodes        : 1
  nproc_per_node   : 1
  run_id           : none
  rdzv_backend     : static
  rdzv_endpoint    : 127.0.0.1:28596
  rdzv_configs     : {'rank': 0, 'timeout': 900}
  max_restarts     : 3
  monitor_interval : 5
  log_dir          : None
  metrics_cfg      : {}

INFO:torch.distributed.elastic.agent.server.local_elastic_agent:log directory set to: /var/folders/bl/c09z1sm91mxfb8z7mn7v4rhh0000gq/T/torchelastic_qtou5z3e/none_o85mwvu4
INFO:torch.distributed.elastic.agent.server.api:[default] starting workers for entrypoint: python
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous'ing worker group
/opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/torch/distributed/elastic/utils/store.py:52: FutureWarning: This is an experimental API and will be changed in future.
  warnings.warn(
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous complete for workers. Result:
  restart_count=0
  master_addr=127.0.0.1
  master_port=28596
  group_rank=0
  group_world_size=1
  local_ranks=[0]
  role_ranks=[0]
  global_ranks=[0]
  role_world_sizes=[1]
  global_world_sizes=[1]

INFO:torch.distributed.elastic.agent.server.api:[default] Starting worker group
INFO:torch.distributed.elastic.multiprocessing:Setting worker0 reply file to: /var/folders/bl/c09z1sm91mxfb8z7mn7v4rhh0000gq/T/torchelastic_qtou5z3e/none_o85mwvu4/attempt_0/0/error.json
projects.mmdet3d_plugin
======
Loading NuScenes tables for version v1.0-trainval...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 21.699 seconds.
======
Reverse indexing ...
Done reverse indexing in 5.6 seconds.
======
load checkpoint from local path: ./ckpts/uniad_base_e2e.pth
2023-07-27 16:18:04,757 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.0.conv2 is upgraded to version 2.
2023-07-27 16:18:04,760 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.1.conv2 is upgraded to version 2.
2023-07-27 16:18:04,762 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.2.conv2 is upgraded to version 2.
2023-07-27 16:18:04,765 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.3.conv2 is upgraded to version 2.
2023-07-27 16:18:04,767 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.4.conv2 is upgraded to version 2.
2023-07-27 16:18:04,770 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.5.conv2 is upgraded to version 2.
2023-07-27 16:18:04,772 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.6.conv2 is upgraded to version 2.
2023-07-27 16:18:04,775 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.7.conv2 is upgraded to version 2.
2023-07-27 16:18:04,777 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.8.conv2 is upgraded to version 2.
2023-07-27 16:18:04,780 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.9.conv2 is upgraded to version 2.
2023-07-27 16:18:04,782 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.10.conv2 is upgraded to version 2.
2023-07-27 16:18:04,785 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.11.conv2 is upgraded to version 2.
2023-07-27 16:18:04,787 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.12.conv2 is upgraded to version 2.
2023-07-27 16:18:04,789 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.13.conv2 is upgraded to version 2.
2023-07-27 16:18:04,792 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.14.conv2 is upgraded to version 2.
2023-07-27 16:18:04,794 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.15.conv2 is upgraded to version 2.
2023-07-27 16:18:04,797 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.16.conv2 is upgraded to version 2.
2023-07-27 16:18:04,799 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.17.conv2 is upgraded to version 2.
2023-07-27 16:18:04,802 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.18.conv2 is upgraded to version 2.
2023-07-27 16:18:04,804 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.19.conv2 is upgraded to version 2.
2023-07-27 16:18:04,807 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.20.conv2 is upgraded to version 2.
2023-07-27 16:18:04,809 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.21.conv2 is upgraded to version 2.
2023-07-27 16:18:04,812 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.22.conv2 is upgraded to version 2.
2023-07-27 16:18:04,815 - root - INFO - ModulatedDeformConvPack img_backbone.layer4.0.conv2 is upgraded to version 2.
2023-07-27 16:18:04,820 - root - INFO - ModulatedDeformConvPack img_backbone.layer4.1.conv2 is upgraded to version 2.
2023-07-27 16:18:04,823 - root - INFO - ModulatedDeformConvPack img_backbone.layer4.2.conv2 is upgraded to version 2.
The model and loaded state dict do not match exactly

size mismatch for seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight: copying a param with shape torch.Size([256, 256]) from checkpoint, the shape in current model is torch.Size([64, 256]).
size mismatch for seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([64]).
size mismatch for seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight: copying a param with shape torch.Size([128, 256]) from checkpoint, the shape in current model is torch.Size([32, 256]).
size mismatch for seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([32]).
unexpected key in source state_dict: bbox_size_fc.weight, bbox_size_fc.bias, pts_bbox_head.query_embedding.weight, pts_bbox_head.transformer.reference_points.weight, pts_bbox_head.transformer.reference_points.bias

> /Users/liangming.xu/code/UniAD/tools/test.py(230)main()
-> result = model(return_loss=False, rescale=True, **data)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_track.py(724)simple_test_track()
-> bs = img.size(0)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_e2e.py(297)forward_test()
-> result_track[0] = self.upsample_bev_if_tiny(result_track[0])
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/panseg_head.py(1013)forward_test()
-> bbox_list = [dict() for i in range(len(img_metas))]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/panseg_head.py(227)forward()
-> enc_outputs_class, enc_outputs_coord = self.transformer(
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(170)forward_test()
-> track_query = outs_track['track_query_embeddings'][None, None, ...]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(171)forward_test()
-> track_boxes = outs_track['track_bbox_results']
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(173)forward_test()
-> track_query = torch.cat([track_query, outs_track['sdc_embedding'][None, None, None, :]], dim=2)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(174)forward_test()
-> sdc_track_boxes = outs_track['sdc_track_bbox_results']
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(176)forward_test()
-> track_boxes[0][0].tensor = torch.cat([track_boxes[0][0].tensor, sdc_track_boxes[0][0].tensor], dim=0)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(177)forward_test()
-> track_boxes[0][1] = torch.cat([track_boxes[0][1], sdc_track_boxes[0][1]], dim=0)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(178)forward_test()
-> track_boxes[0][2] = torch.cat([track_boxes[0][2], sdc_track_boxes[0][2]], dim=0)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(179)forward_test()
-> track_boxes[0][3] = torch.cat([track_boxes[0][3], sdc_track_boxes[0][3]], dim=0)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(180)forward_test()
-> memory, memory_mask, memory_pos, lane_query, _, lane_query_pos, hw_lvl = outs_seg['args_tuple']
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(181)forward_test()
-> outs_motion = self(bev_embed, track_query, lane_query, lane_query_pos, track_boxes)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(182)forward_test()
-> traj_results = self.get_trajs(outs_motion, track_boxes)
(Pdb) *** AttributeError: 'dict' object has no attribute 'shape'
(Pdb) dict_keys(['all_traj_scores', 'all_traj_preds', 'valid_traj_masks', 'traj_query', 'track_query', 'track_query_pos'])
(Pdb) torch.Size([3, 1, 4, 6, 12, 5])
(Pdb) torch.Size([3, 1, 4, 6])
(Pdb) Sequential(
  (0): Linear(in_features=256, out_features=256, bias=True)
  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  (2): ReLU(inplace=True)
  (3): Linear(in_features=256, out_features=256, bias=True)
  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  (5): ReLU(inplace=True)
  (6): Linear(in_features=256, out_features=1, bias=True)
)
(Pdb) Sequential(
  (0): Linear(in_features=256, out_features=256, bias=True)
  (1): ReLU()
  (2): Linear(in_features=256, out_features=256, bias=True)
  (3): ReLU()
  (4): Linear(in_features=256, out_features=60, bias=True)
)
(Pdb) 177  	        track_boxes[0][1] = torch.cat([track_boxes[0][1], sdc_track_boxes[0][1]], dim=0)
178  	        track_boxes[0][2] = torch.cat([track_boxes[0][2], sdc_track_boxes[0][2]], dim=0)
179  	        track_boxes[0][3] = torch.cat([track_boxes[0][3], sdc_track_boxes[0][3]], dim=0)
180  	        memory, memory_mask, memory_pos, lane_query, _, lane_query_pos, hw_lvl = outs_seg['args_tuple']
181  	        outs_motion = self(bev_embed, track_query, lane_query, lane_query_pos, track_boxes)
182  ->	        traj_results = self.get_trajs(outs_motion, track_boxes)
183  	        bboxes, scores, labels, bbox_index, mask = track_boxes[0]
184  	        outs_motion['track_scores'] = scores[None, :]
185  	        labels[-1] = 0
186  	        def filter_vehicle_query(outs_motion, labels, vehicle_id_list):
187  	            if len(labels) < 1:  # No other obj query except sdc query.
(Pdb) *** AttributeError: 'dict' object has no attribute 'shape'
(Pdb) dict_keys(['all_traj_scores', 'all_traj_preds', 'valid_traj_masks', 'traj_query', 'track_query', 'track_query_pos'])
(Pdb) torch.Size([3, 1, 4, 6, 256])
(Pdb) --Call--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py(178)new_func()
-> @functools.wraps(old_func)
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py(182)new_func()
-> if not isinstance(args[0], torch.nn.Module):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py(185)new_func()
-> if not (hasattr(args[0], 'fp16_enabled') and args[0].fp16_enabled):
(Pdb) > /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py(186)new_func()
-> return old_func(*args, **kwargs)
(Pdb) --Call--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(536)get_trajs()
-> @force_fp32(apply_to=('preds_dicts'))
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(548)get_trajs()
-> num_samples = len(bbox_results)
(Pdb) *** AttributeError: 'list' object has no attribute 'shape'
(Pdb) 1
(Pdb) *** AttributeError: 'list' object has no attribute 'shape'
(Pdb) [[LiDARInstance3DBoxes(
    tensor([[-7.5262e-01, -2.4579e+01, -2.2621e+00,  1.9450e+00,  4.5364e+00,
          1.5434e+00, -3.1230e+00,  8.8571e-02,  5.5166e+00],
        [-1.2292e+01,  3.5435e+01, -9.5619e-01,  7.1796e-01,  8.1444e-01,
          1.7480e+00,  3.0222e+00, -2.9149e-01,  1.2141e+00],
        [-4.4362e+00, -1.0457e+01, -1.9604e+00,  5.6273e-01,  1.7301e+00,
          1.0861e+00,  2.6956e-02, -1.2011e-03, -9.9059e-04],
        [ 3.1940e-02, -6.2492e-02, -7.7301e-01,  1.7408e+00,  4.1469e+00,
          1.5712e+00, -3.1400e+00, -1.7210e-01,  6.9688e+00]])), tensor([0.8999, 0.8660, 0.8401, 0.4058]), tensor([0, 8, 7, 0]), tensor([1, 2, 0, 0]), tensor([True, True, True])]]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(549)get_trajs()
-> num_layers = preds_dicts['all_traj_preds'].shape[0]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(550)get_trajs()
-> ret_list = []
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(551)get_trajs()
-> for i in range(num_samples):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(552)get_trajs()
-> preds = dict()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(553)get_trajs()
-> for j in range(num_layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(554)get_trajs()
-> subfix = '_' + str(j) if j < (num_layers - 1) else ''
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(555)get_trajs()
-> traj = preds_dicts['all_traj_preds'][j, i]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(556)get_trajs()
-> traj_scores = preds_dicts['all_traj_scores'][j, i]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(558)get_trajs()
-> traj_scores, traj = traj_scores.cpu(), traj.cpu()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(559)get_trajs()
-> preds['traj' + subfix] = traj
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(560)get_trajs()
-> preds['traj_scores' + subfix] = traj_scores
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(553)get_trajs()
-> for j in range(num_layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(554)get_trajs()
-> subfix = '_' + str(j) if j < (num_layers - 1) else ''
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(555)get_trajs()
-> traj = preds_dicts['all_traj_preds'][j, i]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(556)get_trajs()
-> traj_scores = preds_dicts['all_traj_scores'][j, i]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(558)get_trajs()
-> traj_scores, traj = traj_scores.cpu(), traj.cpu()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(559)get_trajs()
-> preds['traj' + subfix] = traj
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(560)get_trajs()
-> preds['traj_scores' + subfix] = traj_scores
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(553)get_trajs()
-> for j in range(num_layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(554)get_trajs()
-> subfix = '_' + str(j) if j < (num_layers - 1) else ''
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(555)get_trajs()
-> traj = preds_dicts['all_traj_preds'][j, i]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(556)get_trajs()
-> traj_scores = preds_dicts['all_traj_scores'][j, i]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(558)get_trajs()
-> traj_scores, traj = traj_scores.cpu(), traj.cpu()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(559)get_trajs()
-> preds['traj' + subfix] = traj
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(560)get_trajs()
-> preds['traj_scores' + subfix] = traj_scores
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(553)get_trajs()
-> for j in range(num_layers):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(561)get_trajs()
-> ret_list.append(preds)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(551)get_trajs()
-> for i in range(num_samples):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(562)get_trajs()
-> return ret_list
(Pdb) [{'traj_0': tensor([[[[ 3.0442e-02,  2.8261e+00,  5.8610e+00,  3.1282e+00, -8.0518e-03],
          [ 2.8122e-02,  5.7200e+00,  2.1210e+00,  1.8659e+00,  7.7493e-02],
          [ 9.4038e-02,  8.6613e+00,  1.7950e+00,  1.2248e+00,  5.4482e-02],
          ...,
          [-5.6559e-02,  2.9115e+01,  4.8043e-01,  5.2445e-01, -2.4412e-02],
          [-1.0788e-01,  3.1952e+01,  4.3026e-01,  4.4227e-01, -4.2585e-03],
          [-1.2989e-01,  3.4564e+01,  3.7479e-01,  3.5846e-01,  1.0436e-02]],

         [[ 6.0117e-02,  2.3832e+00,  3.9560e+00,  2.6714e+00, -8.5704e-03],
          [ 6.9055e-02,  4.7143e+00,  1.1237e+00,  1.4199e+00,  1.1384e-01],
          [ 1.5462e-01,  6.8055e+00,  9.2235e-01,  8.8836e-01,  4.1805e-02],
          ...,
          [ 1.4171e+00,  1.7658e+01,  1.7899e-01,  2.9831e-01,  1.8063e-02],
          [ 1.7510e+00,  1.8763e+01,  1.6664e-01,  2.7491e-01,  1.6744e-02],
          [ 2.0183e+00,  2.0015e+01,  1.4765e-01,  2.1270e-01,  3.0041e-02]],

         [[ 2.3770e-02,  3.4214e+00,  4.0126e+00,  1.2584e+00,  6.4477e-03],
          [ 4.5720e-02,  7.0675e+00,  1.7956e+00,  8.9183e-01, -5.1447e-02],
          [ 1.2163e-01,  1.1052e+01,  1.2182e+00,  6.4841e-01, -9.2991e-02],
          ...,
          [ 2.6963e-01,  3.8989e+01,  4.1565e-01,  2.7747e-01, -4.4513e-02],
          [ 9.5578e-02,  4.2808e+01,  4.1357e-01,  2.6463e-01,  8.4542e-03],
          [ 6.2041e-02,  4.6029e+01,  3.6345e-01,  2.4787e-01, -4.8712e-03]],

         [[ 4.8888e-02,  1.7842e+00,  3.7949e+00,  2.3041e+00, -4.4087e-02],
          [ 3.1345e-02,  3.3650e+00,  1.0929e+00,  1.1007e+00,  1.5573e-01],
          [ 5.9777e-02,  4.7349e+00,  8.2932e-01,  7.0552e-01,  8.0835e-02],
          ...,
          [ 9.6179e-01,  9.2010e+00,  1.5012e-01,  2.2593e-01,  6.8941e-03],
          [ 1.1983e+00,  9.4223e+00,  1.3515e-01,  2.1261e-01,  2.8612e-02],
          [ 1.3467e+00,  9.9187e+00,  1.1575e-01,  1.7202e-01,  3.5404e-02]],

         [[ 5.2873e-02,  3.0583e+00,  5.7285e+00,  2.6648e+00,  6.1439e-03],
          [ 9.3588e-02,  6.2531e+00,  2.1361e+00,  1.6407e+00,  3.1338e-02],
          [ 1.9274e-01,  9.6259e+00,  1.6615e+00,  1.0885e+00,  1.8588e-02],
          ...,
          [ 4.1146e-01,  3.3245e+01,  4.7693e-01,  4.3954e-01, -2.0867e-02],
          [ 3.3465e-01,  3.6504e+01,  4.3841e-01,  3.7841e-01, -7.2043e-03],
          [ 3.2314e-01,  3.9413e+01,  3.8045e-01,  3.1422e-01,  2.7827e-02]],

         [[ 1.1429e-01,  2.6953e+00,  6.7983e+00,  3.6494e+00,  2.4755e-02],
          [ 1.6773e-01,  5.3478e+00,  1.9387e+00,  2.0758e+00,  1.1533e-01],
          [ 2.9683e-01,  7.8773e+00,  1.6264e+00,  1.2208e+00,  8.7066e-02],
          ...,
          [ 1.4361e+00,  2.2917e+01,  3.5664e-01,  4.5529e-01,  7.3731e-03],
          [ 1.7282e+00,  2.4767e+01,  3.0192e-01,  3.8892e-01,  2.5264e-02],
          [ 1.9356e+00,  2.6641e+01,  2.5505e-01,  2.9210e-01,  4.1763e-02]]],


        [[[-6.8088e-02,  2.9284e-01,  9.7785e+00,  7.1593e+00,  3.3392e-03],
          [-9.8131e-02,  5.5384e-01,  4.8308e+00,  4.0148e+00, -6.4663e-02],
          [-1.0370e-01,  7.7316e-01,  3.3684e+00,  2.5561e+00, -4.4848e-02],
          ...,
          [-3.4889e-01,  2.0019e+00,  8.8304e-01,  8.2742e-01,  3.4736e-02],
          [-3.6376e-01,  2.2540e+00,  7.6622e-01,  6.9240e-01,  2.4571e-03],
          [-3.5747e-01,  2.4917e+00,  5.9724e-01,  5.7942e-01,  5.8263e-02]],

         [[-1.4523e-01,  6.2952e-01,  1.2853e+01,  1.3577e+01,  1.2538e-02],
          [-2.9115e-01,  1.2294e+00,  6.2072e+00,  7.3012e+00, -1.1290e-02],
          [-4.3555e-01,  1.8157e+00,  3.9814e+00,  4.6203e+00, -1.4979e-02],
          ...,
          [-1.5663e+00,  5.7698e+00,  1.0768e+00,  1.4171e+00,  7.4628e-02],
          [-1.7583e+00,  6.3215e+00,  9.5526e-01,  1.1670e+00,  5.7059e-02],
          [-1.8485e+00,  6.8772e+00,  7.6765e-01,  9.9918e-01,  6.5246e-02]],

         [[-1.1418e-02,  5.8151e-01,  1.2935e+01,  1.2243e+01,  8.6189e-03],
          [-1.5314e-02,  1.1725e+00,  6.3462e+00,  6.8961e+00, -2.7017e-02],
          [-5.5910e-02,  1.7546e+00,  4.1391e+00,  4.7389e+00, -6.2596e-02],
          ...,
          [-1.4186e-01,  5.6318e+00,  1.1618e+00,  1.6672e+00, -6.1263e-03],
          [-1.3910e-01,  6.1541e+00,  1.0170e+00,  1.4213e+00,  2.5657e-02],
          [-1.4248e-01,  6.7415e+00,  8.4300e-01,  1.2094e+00,  4.1561e-02]],

         [[-1.6401e-01,  8.0420e-01,  6.8405e+00,  5.1836e+00,  1.4937e-02],
          [-3.1294e-01,  1.5940e+00,  3.5166e+00,  3.2333e+00, -1.4467e-01],
          [-4.6250e-01,  2.4367e+00,  1.9036e+00,  2.3934e+00, -2.5377e-01],
          ...,
          [-8.4743e-01,  7.8978e+00,  9.5780e-01,  1.0977e+00,  6.8732e-02],
          [-9.1334e-01,  8.6785e+00,  8.7712e-01,  1.0405e+00,  9.6589e-02],
          [-9.6249e-01,  9.3615e+00,  7.6855e-01,  9.0210e-01,  7.4217e-02]],

         [[-2.4668e-02,  6.8606e-01,  1.3303e+01,  1.3380e+01,  4.2813e-02],
          [-2.6570e-02,  1.3729e+00,  6.1415e+00,  7.4431e+00, -2.8810e-02],
          [-4.0235e-02,  2.0593e+00,  3.8715e+00,  5.0244e+00, -5.6725e-02],
          ...,
          [ 1.2845e-01,  6.6576e+00,  1.1307e+00,  1.8102e+00,  1.9192e-02],
          [ 1.6475e-01,  7.2668e+00,  1.0145e+00,  1.6004e+00,  4.9222e-02],
          [ 2.0785e-01,  7.9248e+00,  8.2980e-01,  1.3642e+00,  5.6410e-02]],

         [[-1.0556e-01,  5.1943e-01,  1.3401e+01,  1.3867e+01,  1.6894e-03],
          [-2.0751e-01,  1.0159e+00,  6.7674e+00,  7.4072e+00, -1.9703e-02],
          [-3.1715e-01,  1.4863e+00,  4.4097e+00,  4.8601e+00, -3.3558e-02],
          ...,
          [-1.1879e+00,  4.7031e+00,  1.2144e+00,  1.5401e+00,  6.0362e-02],
          [-1.3488e+00,  5.1878e+00,  1.0853e+00,  1.2888e+00,  4.8171e-02],
          [-1.3884e+00,  5.6430e+00,  8.5532e-01,  1.1016e+00,  7.0575e-02]]],


        [[[-4.8347e-02, -1.9377e-01,  1.1431e+01,  7.0978e+00,  1.7369e-01],
          [-1.0228e-01, -4.5366e-01,  6.0831e+00,  4.0088e+00,  2.0662e-01],
          [-2.2505e-01, -8.9990e-01,  3.8571e+00,  2.6662e+00,  1.6230e-01],
          ...,
          [-1.6171e+00, -4.9000e+00,  5.7210e-01,  7.3825e-01,  6.0334e-02],
          [-1.8202e+00, -5.4728e+00,  5.0104e-01,  5.7064e-01,  2.4889e-02],
          [-2.0387e+00, -5.8185e+00,  4.3297e-01,  4.2785e-01,  1.1599e-02]],

         [[-9.1563e-04,  1.6583e-03,  6.0591e+01,  6.9662e+01, -3.9735e-02],
          [-6.1802e-03,  1.6719e-03,  3.6141e+01,  4.2097e+01, -2.8029e-02],
          [-1.0094e-02,  2.5749e-03,  2.6880e+01,  3.3341e+01, -3.1465e-02],
          ...,
          [-6.9325e-02, -6.0226e-03,  1.0136e+01,  1.3134e+01, -3.2863e-02],
          [-7.2222e-02, -8.2117e-03,  8.8584e+00,  1.1369e+01, -1.4445e-03],
          [-6.6644e-02, -1.3650e-02,  7.5818e+00,  9.6815e+00,  7.0871e-03]],

         [[-7.1182e-02, -8.7191e-02,  1.4902e+01,  1.0707e+01,  1.1683e-01],
          [-1.6824e-01, -2.7405e-01,  6.4146e+00,  5.1861e+00,  1.4317e-01],
          [-3.1176e-01, -7.0611e-01,  3.7112e+00,  3.0863e+00,  1.2903e-01],
          ...,
          [-1.4077e+00, -5.9121e+00,  4.1420e-01,  6.0757e-01,  6.5273e-02],
          [-1.5691e+00, -6.7376e+00,  3.4417e-01,  4.6333e-01,  4.1508e-02],
          [-1.7464e+00, -7.3851e+00,  2.7304e-01,  3.2515e-01,  1.1879e-02]],

         [[-8.0826e-03, -1.6875e-02,  3.5970e+01,  3.3456e+01, -2.6155e-02],
          [-1.1092e-02, -3.8356e-02,  2.2090e+01,  1.9388e+01, -7.1642e-03],
          [-1.3476e-02, -5.9264e-02,  1.5870e+01,  1.4636e+01, -2.4934e-02],
          ...,
          [-6.7287e-02, -1.4731e-01,  5.4709e+00,  5.9930e+00, -7.1977e-03],
          [-6.1501e-02, -1.5544e-01,  4.7738e+00,  4.9399e+00,  1.6558e-03],
          [-7.3061e-02, -1.5399e-01,  3.9911e+00,  4.1613e+00,  1.8014e-02]],

         [[-4.2042e-03,  4.5252e-02,  1.6466e+01,  1.7356e+01, -6.7803e-04],
          [-2.6639e-02,  6.3963e-02,  1.0471e+01,  1.1317e+01,  3.1709e-02],
          [-4.8759e-02,  9.1389e-02,  8.0319e+00,  8.5950e+00,  1.5150e-02],
          ...,
          [-2.2776e-01,  1.2008e-01,  2.8165e+00,  3.6506e+00,  2.3504e-02],
          [-2.3505e-01,  1.1807e-01,  2.4957e+00,  3.1975e+00,  5.5561e-02],
          [-2.2442e-01,  8.2658e-02,  2.0701e+00,  2.7308e+00,  4.7278e-02]],

         [[-1.2858e-02, -6.5347e-02,  2.0644e+01,  1.7738e+01,  2.6675e-02],
          [-1.5154e-02, -1.2662e-01,  1.1287e+01,  9.7213e+00,  3.3464e-02],
          [-2.5077e-02, -2.3729e-01,  7.5563e+00,  6.6339e+00,  2.9211e-02],
          ...,
          [-3.0137e-01, -1.2626e+00,  1.4765e+00,  1.9253e+00,  2.1758e-02],
          [-3.6699e-01, -1.3927e+00,  1.1775e+00,  1.5249e+00,  8.9893e-03],
          [-4.5241e-01, -1.4885e+00,  9.4491e-01,  1.1783e+00,  3.4505e-03]]],


        [[[-4.1988e-02,  3.6846e+00,  1.8225e+01,  4.7749e+00, -5.3487e-02],
          [-1.4826e-01,  7.2950e+00,  5.3698e+00,  3.3747e+00, -4.6182e-02],
          [-3.0329e-01,  1.0958e+01,  2.8572e+00,  2.3395e+00,  5.6027e-02],
          ...,
          [-4.6340e-01,  3.4383e+01,  4.5817e-01,  7.9720e-01, -8.8458e-02],
          [-3.0403e-01,  3.7261e+01,  3.3923e-01,  6.4965e-01, -4.5452e-02],
          [-3.1743e-01,  4.0290e+01,  2.5031e-01,  4.4600e-01, -5.4680e-02]],

         [[-2.6191e-02,  3.5836e+00,  1.7422e+01,  4.0767e+00, -4.3839e-02],
          [-1.5525e-01,  7.0426e+00,  5.1464e+00,  2.9065e+00, -9.2439e-03],
          [-2.8621e-01,  1.0450e+01,  3.0430e+00,  1.9682e+00,  5.6318e-02],
          ...,
          [-1.8769e+00,  3.0294e+01,  5.1899e-01,  6.7194e-01, -7.2295e-02],
          [-2.0274e+00,  3.2570e+01,  3.7306e-01,  5.3912e-01,  1.6754e-02],
          [-2.3063e+00,  3.5061e+01,  2.9282e-01,  3.9387e-01,  1.0137e-02]],

         [[-6.7722e-02,  3.8467e+00,  1.2678e+01,  3.6346e+00, -4.2092e-02],
          [-2.6341e-01,  7.7555e+00,  4.9834e+00,  2.6992e+00, -2.8370e-02],
          [-5.8691e-01,  1.1759e+01,  2.2584e+00,  1.9063e+00, -3.2155e-03],
          ...,
          [-4.6383e+00,  4.1336e+01,  4.3775e-01,  6.5361e-01, -6.8952e-02],
          [-5.2455e+00,  4.5251e+01,  3.4118e-01,  5.6242e-01,  1.7681e-02],
          [-5.8025e+00,  4.9079e+01,  2.7280e-01,  4.0958e-01,  2.1457e-02]],

         [[-3.5657e-02,  3.5023e+00,  1.8376e+01,  3.0704e+00, -1.6749e-03],
          [-1.4005e-01,  6.7958e+00,  4.8813e+00,  2.1898e+00, -2.0473e-02],
          [-1.2935e-01,  9.9333e+00,  2.6513e+00,  1.4605e+00,  1.3200e-02],
          ...,
          [ 1.3440e+00,  2.5078e+01,  3.7385e-01,  4.3615e-01, -8.8225e-02],
          [ 1.7938e+00,  2.6479e+01,  2.7664e-01,  3.6431e-01,  3.8896e-02],
          [ 2.0147e+00,  2.8235e+01,  2.2155e-01,  2.8983e-01, -8.2515e-04]],

         [[-4.8342e-02,  3.7008e+00,  1.4984e+01,  4.3531e+00, -7.8472e-02],
          [-2.0951e-01,  7.4054e+00,  5.2798e+00,  3.0280e+00, -7.9117e-02],
          [-5.1623e-01,  1.1171e+01,  2.6626e+00,  2.2383e+00, -1.1340e-02],
          ...,
          [-3.9671e+00,  3.7702e+01,  4.9625e-01,  8.4788e-01, -6.1870e-02],
          [-4.4613e+00,  4.1190e+01,  3.8425e-01,  7.0952e-01, -3.4417e-02],
          [-4.9678e+00,  4.4691e+01,  2.9894e-01,  4.9824e-01,  1.3452e-02]],

         [[-4.2366e-02,  3.5841e+00,  2.2502e+01,  4.8533e+00, -9.2884e-02],
          [-1.6733e-01,  7.0864e+00,  6.2338e+00,  3.4112e+00, -4.6848e-02],
          [-3.6435e-01,  1.0597e+01,  3.0769e+00,  2.2675e+00,  2.6101e-02],
          ...,
          [-2.0666e+00,  3.2323e+01,  4.2946e-01,  7.3185e-01, -1.1267e-01],
          [-2.2360e+00,  3.4920e+01,  3.1821e-01,  5.9325e-01, -4.2975e-02],
          [-2.5246e+00,  3.7724e+01,  2.3463e-01,  4.1008e-01, -5.3412e-02]]]]), 'traj_scores_0': tensor([[-1.2175, -2.4435, -2.2734, -2.4497, -1.4478, -1.6462],
        [-2.4514, -1.7904, -1.6878, -1.8670, -1.2022, -2.2360],
        [-3.4080, -0.2655, -4.9763, -2.1366, -2.8855, -3.9486],
        [-1.4166, -1.8811, -2.0876, -2.7106, -1.3813, -1.8121]]), 'traj_1': tensor([[[[ 5.6325e-02,  2.9808e+00,  5.8523e+00,  3.4522e+00,  3.0423e-03],
          [ 6.9512e-02,  6.0307e+00,  2.0942e+00,  1.9765e+00,  5.6854e-02],
          [ 1.5093e-01,  9.0746e+00,  1.8456e+00,  1.3238e+00,  7.8975e-02],
          ...,
          [-2.0557e-01,  3.0063e+01,  5.1500e-01,  5.8853e-01, -1.4521e-03],
          [-4.0676e-01,  3.2930e+01,  4.2695e-01,  4.4503e-01,  4.3157e-03],
          [-4.9222e-01,  3.5545e+01,  3.6148e-01,  3.5500e-01, -1.0190e-02]],

         [[-1.2714e-02,  1.5855e+00,  3.6027e+00,  1.9452e+00,  4.6402e-02],
          [-5.3767e-02,  2.9149e+00,  1.0877e+00,  1.0198e+00,  7.0227e-02],
          [ 8.6911e-02,  4.0399e+00,  7.6343e-01,  5.9959e-01,  4.1540e-02],
          ...,
          [-1.9489e-01,  8.3512e+00,  1.3240e-01,  1.9450e-01, -4.1161e-02],
          [-2.1319e-01,  8.6903e+00,  1.2117e-01,  1.7518e-01,  2.2786e-02],
          [-2.5867e-01,  8.9671e+00,  1.1616e-01,  1.4103e-01,  1.9138e-02]],

         [[ 6.6338e-02,  3.7185e+00,  3.5819e+00,  1.1984e+00,  8.4893e-03],
          [ 1.0426e-01,  7.6829e+00,  1.8298e+00,  8.6638e-01, -2.3870e-02],
          [ 2.2519e-01,  1.1854e+01,  1.1536e+00,  7.0737e-01, -3.1876e-02],
          ...,
          [-3.6309e-01,  4.0882e+01,  5.2733e-01,  3.1882e-01, -1.3770e-01],
          [-7.0141e-01,  4.4834e+01,  4.8746e-01,  2.9725e-01, -9.5034e-02],
          [-9.8737e-01,  4.8146e+01,  4.9130e-01,  2.7599e-01, -7.3678e-02]],

         [[ 1.9966e-02,  2.3961e+00,  4.6820e+00,  3.1521e+00, -1.5256e-02],
          [-2.8580e-02,  4.6067e+00,  1.4506e+00,  1.8019e+00,  6.6983e-02],
          [ 5.7653e-02,  6.7253e+00,  1.5607e+00,  1.0854e+00,  6.3951e-02],
          ...,
          [-6.0279e-01,  1.8266e+01,  4.1478e-01,  4.3820e-01, -1.7531e-02],
          [-7.1302e-01,  1.9573e+01,  3.3086e-01,  3.4371e-01,  6.8001e-03],
          [-8.2439e-01,  2.0896e+01,  2.7118e-01,  2.6784e-01, -1.6284e-02]],

         [[ 3.7108e-02,  3.2287e+00,  4.7184e+00,  2.6651e+00,  1.6698e-02],
          [ 3.0097e-02,  6.6198e+00,  1.9230e+00,  1.6599e+00,  2.1948e-02],
          [ 7.9504e-02,  1.0017e+01,  1.5956e+00,  1.1723e+00,  3.6080e-02],
          ...,
          [-1.7479e-01,  3.3933e+01,  5.4585e-01,  5.4385e-01, -4.7770e-04],
          [-3.6699e-01,  3.7256e+01,  4.6860e-01,  4.3739e-01,  7.7307e-03],
          [-4.2127e-01,  4.0201e+01,  4.2178e-01,  3.6998e-01, -9.0583e-03]],

         [[ 7.5438e-02,  2.7410e+00,  5.5931e+00,  3.7866e+00,  2.4204e-02],
          [ 1.1205e-01,  5.4491e+00,  1.7351e+00,  2.0573e+00,  1.0715e-01],
          [ 2.2330e-01,  8.1264e+00,  1.5147e+00,  1.2546e+00,  9.6856e-02],
          ...,
          [-7.1863e-03,  2.5527e+01,  3.2998e-01,  4.8324e-01,  3.3169e-02],
          [-1.2071e-01,  2.7755e+01,  2.6583e-01,  3.7130e-01,  4.5896e-02],
          [-1.6873e-01,  2.9833e+01,  2.1643e-01,  2.8206e-01,  2.1192e-02]]],


        [[[-3.6148e-02,  1.5664e-01,  9.5600e+00,  5.9926e+00, -5.2974e-03],
          [-7.9578e-02,  2.9282e-01,  4.9146e+00,  3.3418e+00, -4.6918e-02],
          [-1.3077e-01,  3.9977e-01,  3.5551e+00,  2.2330e+00, -7.0200e-02],
          ...,
          [-4.2001e-01,  1.0051e+00,  1.0639e+00,  8.4139e-01, -3.6640e-02],
          [-4.5978e-01,  1.0932e+00,  8.9775e-01,  6.5021e-01, -3.3416e-02],
          [-4.8971e-01,  1.1896e+00,  7.0431e-01,  5.4177e-01, -5.3364e-03]],

         [[-1.8167e-01,  5.3609e-01,  1.0728e+01,  1.0571e+01,  1.0200e-03],
          [-3.5974e-01,  1.0778e+00,  5.0699e+00,  5.6646e+00,  4.9613e-03],
          [-5.6612e-01,  1.5863e+00,  3.1598e+00,  3.7434e+00,  5.9906e-03],
          ...,
          [-2.0414e+00,  5.0949e+00,  9.8646e-01,  1.2045e+00,  8.6239e-02],
          [-2.2526e+00,  5.5748e+00,  8.5144e-01,  1.0006e+00,  1.0044e-01],
          [-2.3363e+00,  6.0476e+00,  6.9450e-01,  8.5568e-01,  7.6194e-02]],

         [[-6.0375e-02,  5.8886e-01,  1.3320e+01,  1.1751e+01, -1.7660e-02],
          [-8.7909e-02,  1.1664e+00,  5.9220e+00,  6.5084e+00, -1.0506e-04],
          [-1.5664e-01,  1.7511e+00,  3.6656e+00,  4.4257e+00, -4.4963e-02],
          ...,
          [-3.7945e-01,  5.7830e+00,  1.0573e+00,  1.5098e+00,  3.6947e-02],
          [-4.0618e-01,  6.3782e+00,  8.8776e-01,  1.2593e+00,  5.7723e-02],
          [-3.5588e-01,  6.9415e+00,  7.2178e-01,  1.0394e+00,  4.0887e-02]],

         [[-2.3610e-01,  7.9602e-01,  7.8945e+00,  4.9311e+00, -8.3769e-02],
          [-4.5990e-01,  1.6067e+00,  3.1766e+00,  2.9691e+00, -1.6074e-01],
          [-7.1029e-01,  2.4982e+00,  1.6575e+00,  1.9525e+00, -2.3501e-01],
          ...,
          [-2.0754e+00,  8.5960e+00,  7.7357e-01,  7.7537e-01,  8.9628e-03],
          [-2.2717e+00,  9.5140e+00,  7.0606e-01,  7.2407e-01,  3.0893e-02],
          [-2.3671e+00,  1.0256e+01,  6.1350e-01,  6.1972e-01,  2.1103e-02]],

         [[-7.4819e-02,  7.1014e-01,  1.3308e+01,  1.2268e+01,  7.2089e-03],
          [-1.1798e-01,  1.4078e+00,  5.6537e+00,  6.6999e+00,  9.0528e-03],
          [-2.0766e-01,  2.1275e+00,  3.2686e+00,  4.4725e+00, -3.5837e-02],
          ...,
          [-4.5606e-01,  7.0981e+00,  1.0123e+00,  1.5325e+00,  5.2492e-02],
          [-4.8021e-01,  7.8105e+00,  8.4852e-01,  1.3158e+00,  8.7193e-02],
          [-4.0014e-01,  8.4633e+00,  7.3421e-01,  1.0895e+00,  7.7754e-02]],

         [[-1.0343e-01,  4.4450e-01,  1.2364e+01,  1.1488e+01, -3.6252e-02],
          [-2.0639e-01,  8.7293e-01,  5.9679e+00,  6.3470e+00, -1.4140e-02],
          [-3.0612e-01,  1.2873e+00,  3.9909e+00,  4.2995e+00, -3.0394e-02],
          ...,
          [-8.5109e-01,  4.1353e+00,  1.1474e+00,  1.4359e+00,  3.6312e-02],
          [-9.2430e-01,  4.5370e+00,  9.6502e-01,  1.1671e+00,  4.8877e-02],
          [-9.2490e-01,  4.9376e+00,  7.7000e-01,  9.9000e-01,  3.0883e-02]]],


        [[[-1.2898e-01,  2.9278e-05,  1.5017e+01,  2.4986e+01,  9.0929e-02],
          [-2.0475e-01, -9.6535e-03,  8.9414e+00,  1.4805e+01,  2.1507e-01],
          [-2.8853e-01, -2.2367e-02,  7.9086e+00,  1.0897e+01,  8.8457e-02],
          ...,
          [-7.2003e-01, -2.2289e-01,  3.2486e+00,  4.6064e+00, -5.1259e-03],
          [-7.8166e-01, -2.2798e-01,  2.9095e+00,  3.7241e+00,  2.2891e-02],
          [-7.9610e-01, -1.9035e-01,  2.5566e+00,  2.9232e+00,  1.1363e-02]],

         [[ 1.2196e-03,  1.2326e-03,  6.5045e+01,  6.7575e+01, -4.1891e-02],
          [-4.3669e-03,  4.1303e-03,  3.9813e+01,  4.3269e+01, -3.5235e-02],
          [-7.8774e-04,  5.2288e-03,  3.1220e+01,  3.4004e+01, -4.5574e-02],
          ...,
          [-2.3787e-02, -6.0748e-04,  1.2911e+01,  1.5006e+01, -4.9301e-02],
          [-2.8735e-02,  3.2920e-03,  1.1715e+01,  1.3115e+01, -3.3002e-02],
          [-2.8108e-02, -3.4365e-04,  1.0251e+01,  1.0871e+01, -2.4573e-02]],

         [[-5.2059e-02, -1.2495e-01,  1.3109e+01,  6.8673e+00,  1.2258e-01],
          [-1.0503e-01, -5.3431e-01,  6.4220e+00,  3.6514e+00,  1.3771e-01],
          [-1.4893e-01, -1.2311e+00,  3.3298e+00,  2.1778e+00,  1.8389e-01],
          ...,
          [-6.6920e-01, -9.4191e+00,  5.7213e-01,  5.3845e-01,  1.3484e-01],
          [-6.5651e-01, -1.0704e+01,  4.6410e-01,  4.1754e-01,  7.4441e-02],
          [-6.1913e-01, -1.1688e+01,  3.6324e-01,  3.1349e-01,  9.9758e-02]],

         [[-1.5418e-02, -2.4912e-02,  3.5115e+01,  2.5515e+01, -1.1949e-02],
          [-2.8162e-02, -5.9612e-02,  2.1330e+01,  1.5549e+01,  4.3592e-03],
          [-3.3148e-02, -8.6650e-02,  1.6193e+01,  1.1778e+01, -1.2801e-02],
          ...,
          [-1.0149e-01, -2.8892e-01,  5.5955e+00,  5.0866e+00, -4.9660e-02],
          [-1.1635e-01, -3.0664e-01,  5.0051e+00,  4.1359e+00, -2.3782e-02],
          [-1.0038e-01, -2.8964e-01,  4.3137e+00,  3.3156e+00,  3.0284e-03]],

         [[-7.9786e-03,  5.7199e-02,  2.9785e+01,  1.7874e+01, -1.5905e-02],
          [-1.7519e-02,  1.0175e-01,  1.9321e+01,  1.1898e+01,  4.4667e-02],
          [-2.6052e-02,  1.4696e-01,  1.5468e+01,  9.6527e+00,  2.2498e-02],
          ...,
          [-1.0269e-01,  2.7225e-01,  6.4788e+00,  4.6727e+00,  2.5935e-02],
          [-8.6506e-02,  2.8162e-01,  5.8220e+00,  3.8774e+00, -1.8039e-03],
          [-8.6232e-02,  2.5808e-01,  4.9051e+00,  3.0373e+00,  1.5035e-02]],

         [[-2.0097e-02, -5.2556e-02,  2.3340e+01,  1.2342e+01,  8.0436e-02],
          [-1.5783e-02, -1.4990e-01,  1.3623e+01,  6.5504e+00,  8.5882e-02],
          [-1.0507e-02, -3.1839e-01,  8.5864e+00,  4.4615e+00,  2.5950e-02],
          ...,
          [-3.3164e-01, -2.3278e+00,  1.7642e+00,  1.4507e+00,  4.3450e-02],
          [-3.8939e-01, -2.5948e+00,  1.4867e+00,  1.0835e+00,  2.3333e-02],
          [-4.1330e-01, -2.8212e+00,  1.1903e+00,  8.1877e-01,  5.6424e-02]]],


        [[[-2.0947e-02,  3.7597e+00,  2.3340e+01,  5.8752e+00, -6.8481e-02],
          [-1.5816e-01,  7.4541e+00,  6.7786e+00,  3.6785e+00,  2.6720e-02],
          [-5.5291e-01,  1.1040e+01,  2.8113e+00,  2.4810e+00, -4.1594e-02],
          ...,
          [-5.9895e+00,  3.3755e+01,  4.2680e-01,  8.1262e-01, -4.0838e-02],
          [-7.1094e+00,  3.6515e+01,  3.1087e-01,  6.2598e-01, -8.9511e-02],
          [-7.9319e+00,  3.9115e+01,  2.4053e-01,  4.3982e-01, -5.1251e-02]],

         [[-3.3508e-02,  3.4139e+00,  1.8311e+01,  4.1845e+00, -5.6137e-02],
          [-2.6795e-01,  6.6557e+00,  5.0404e+00,  2.5461e+00,  8.3676e-02],
          [-6.5080e-01,  9.6494e+00,  2.3284e+00,  1.6363e+00,  4.0620e-02],
          ...,
          [-7.8920e+00,  2.3995e+01,  3.0269e-01,  4.6349e-01, -4.4525e-02],
          [-9.2525e+00,  2.5277e+01,  2.2852e-01,  3.7916e-01, -4.6118e-02],
          [-1.0328e+01,  2.6574e+01,  1.8217e-01,  2.9310e-01, -1.6299e-02]],

         [[-4.7398e-02,  3.9377e+00,  1.2747e+01,  3.4193e+00, -5.3094e-02],
          [-3.2166e-01,  7.9680e+00,  4.9927e+00,  2.3765e+00, -5.1251e-02],
          [-9.5885e-01,  1.2051e+01,  2.3420e+00,  1.7300e+00, -2.7571e-02],
          ...,
          [-1.0001e+01,  4.2153e+01,  5.5951e-01,  6.2947e-01, -9.4668e-02],
          [-1.1862e+01,  4.6353e+01,  4.3692e-01,  5.3409e-01, -1.1875e-01],
          [-1.3303e+01,  4.9986e+01,  3.8581e-01,  4.1747e-01, -1.2603e-01]],

         [[-1.1898e-02,  3.6003e+00,  2.1340e+01,  5.2552e+00, -5.8608e-02],
          [-1.1079e-01,  7.0055e+00,  5.4719e+00,  3.3095e+00,  4.0414e-02],
          [-2.7776e-01,  1.0244e+01,  2.7165e+00,  2.1277e+00,  7.6685e-03],
          ...,
          [-1.8739e+00,  2.8271e+01,  3.4556e-01,  6.4875e-01, -1.3601e-02],
          [-2.0965e+00,  3.0200e+01,  2.4799e-01,  5.2196e-01, -1.9010e-02],
          [-2.2466e+00,  3.2158e+01,  1.8368e-01,  3.7891e-01, -2.0698e-02]],

         [[-5.5471e-02,  3.7856e+00,  1.6143e+01,  4.3568e+00, -7.2438e-02],
          [-3.3209e-01,  7.6449e+00,  5.7991e+00,  2.9151e+00, -6.4392e-02],
          [-9.6034e-01,  1.1488e+01,  2.6880e+00,  2.1472e+00, -5.1788e-02],
          ...,
          [-9.3822e+00,  3.9471e+01,  6.0671e-01,  7.9847e-01, -8.4846e-02],
          [-1.1110e+01,  4.3341e+01,  4.8321e-01,  6.6778e-01, -1.3571e-01],
          [-1.2403e+01,  4.6751e+01,  4.0766e-01,  4.9687e-01, -1.2038e-01]],

         [[-4.1253e-02,  3.7233e+00,  2.0371e+01,  5.5088e+00, -7.9428e-02],
          [-2.8572e-01,  7.3550e+00,  5.9381e+00,  3.4139e+00,  1.9093e-02],
          [-8.0018e-01,  1.0877e+01,  2.5925e+00,  2.3175e+00, -3.5907e-02],
          ...,
          [-8.7533e+00,  3.2267e+01,  4.3848e-01,  7.3580e-01, -5.4334e-02],
          [-1.0358e+01,  3.4761e+01,  3.2590e-01,  5.7144e-01, -9.6226e-02],
          [-1.1587e+01,  3.7135e+01,  2.5401e-01,  4.1420e-01, -7.0226e-02]]]]), 'traj_scores_1': tensor([[-1.2914, -2.1547, -2.5577, -2.0095, -1.5876, -1.6441],
        [-2.1083, -1.8294, -1.5742, -2.1351, -1.3271, -2.0604],
        [-2.9437, -0.2418, -5.5213, -2.5613, -2.6923, -4.3268],
        [-1.6340, -2.3409, -2.1999, -1.8670, -1.2720, -1.8144]]), 'traj': tensor([[[[ 6.6951e-02,  2.9526e+00,  5.3835e+00,  3.9859e+00,  3.2042e-03],
          [ 9.3914e-02,  5.9029e+00,  1.8301e+00,  2.1380e+00,  1.3080e-02],
          [ 1.6668e-01,  8.8604e+00,  1.8110e+00,  1.3761e+00,  4.1146e-02],
          ...,
          [ 2.1232e-01,  3.0127e+01,  4.7653e-01,  5.8635e-01, -2.3872e-02],
          [ 1.4761e-01,  3.3111e+01,  3.9602e-01,  4.4660e-01, -3.8984e-02],
          [ 5.6767e-02,  3.5845e+01,  3.2061e-01,  3.4855e-01, -2.7779e-02]],

         [[-1.7391e-01,  1.7487e+00,  2.9657e+00,  1.7153e+00,  1.0513e-01],
          [-3.6901e-01,  3.1815e+00,  9.7286e-01,  8.9073e-01,  1.1665e-01],
          [-4.8371e-01,  4.3194e+00,  7.4259e-01,  5.1838e-01,  8.1726e-02],
          ...,
          [-1.4717e-01,  9.4206e+00,  9.9380e-02,  1.7936e-01,  5.2734e-02],
          [ 1.7154e-01,  9.8738e+00,  8.8287e-02,  1.7506e-01,  1.4111e-01],
          [ 4.4587e-01,  1.0349e+01,  8.7931e-02,  1.4272e-01,  1.0535e-01]],

         [[ 3.8983e-02,  3.5907e+00,  3.4186e+00,  1.4554e+00, -8.1704e-02],
          [ 3.3799e-02,  7.4116e+00,  1.7449e+00,  1.0568e+00, -9.6606e-02],
          [ 1.3637e-02,  1.1464e+01,  1.2606e+00,  8.6401e-01, -6.9718e-02],
          ...,
          [-1.5376e+00,  4.0562e+01,  5.1352e-01,  3.6871e-01, -1.1100e-01],
          [-1.9518e+00,  4.4637e+01,  4.8375e-01,  3.3760e-01, -4.3355e-02],
          [-2.3149e+00,  4.8128e+01,  4.5688e-01,  3.0046e-01, -1.0128e-01]],

         [[-3.9439e-03,  2.4165e+00,  4.4086e+00,  3.0519e+00,  3.9313e-02],
          [-1.4988e-02,  4.7255e+00,  1.3976e+00,  1.6279e+00,  9.7670e-02],
          [ 7.2063e-03,  6.9118e+00,  1.4290e+00,  1.0107e+00,  6.1539e-02],
          ...,
          [ 5.9522e-01,  2.1194e+01,  2.8591e-01,  4.2740e-01,  3.1597e-02],
          [ 7.7944e-01,  2.3096e+01,  2.3169e-01,  3.4277e-01,  2.7508e-02],
          [ 8.6576e-01,  2.4873e+01,  1.9632e-01,  2.6909e-01,  2.0932e-02]],

         [[ 6.4498e-02,  3.1791e+00,  4.7205e+00,  3.1403e+00, -1.7109e-02],
          [ 8.3494e-02,  6.4697e+00,  1.7954e+00,  1.8043e+00, -2.6597e-02],
          [ 1.1336e-01,  9.8467e+00,  1.6120e+00,  1.2544e+00,  1.0311e-02],
          ...,
          [-4.7440e-01,  3.4735e+01,  4.9173e-01,  5.3143e-01, -4.5027e-02],
          [-6.9826e-01,  3.8269e+01,  4.3011e-01,  4.2636e-01, -5.3360e-02],
          [-9.1129e-01,  4.1421e+01,  3.6278e-01,  3.4485e-01, -5.2501e-02]],

         [[ 5.1651e-02,  2.7340e+00,  5.2131e+00,  3.5572e+00,  1.6981e-02],
          [ 7.1345e-02,  5.4482e+00,  1.6493e+00,  1.8982e+00,  7.0466e-02],
          [ 1.2707e-01,  8.1020e+00,  1.6316e+00,  1.1731e+00,  5.1001e-02],
          ...,
          [ 7.3403e-01,  2.6492e+01,  3.1397e-01,  4.8002e-01,  3.3425e-02],
          [ 8.3997e-01,  2.8990e+01,  2.5832e-01,  3.6972e-01,  5.6035e-03],
          [ 8.9281e-01,  3.1301e+01,  2.1251e-01,  2.8589e-01,  1.3698e-02]]],


        [[[-6.6764e-02,  9.6939e-02,  8.3910e+00,  6.1668e+00,  1.8411e-02],
          [-1.3660e-01,  1.8985e-01,  4.4358e+00,  3.5657e+00, -2.1607e-02],
          [-1.7891e-01,  2.6067e-01,  3.2228e+00,  2.2663e+00,  2.8802e-02],
          ...,
          [-6.2179e-01,  5.6944e-01,  9.4529e-01,  8.4450e-01,  2.7161e-02],
          [-6.3309e-01,  6.1446e-01,  7.8832e-01,  6.8459e-01, -2.5805e-02],
          [-6.4916e-01,  6.7125e-01,  6.3692e-01,  5.6768e-01, -1.6815e-03]],

         [[-2.0107e-01,  5.2334e-01,  9.9574e+00,  1.0083e+01,  1.0417e-03],
          [-3.8869e-01,  1.0315e+00,  4.7681e+00,  5.6557e+00, -4.6950e-02],
          [-5.9866e-01,  1.5413e+00,  3.0364e+00,  3.7492e+00, -2.3923e-02],
          ...,
          [-2.0792e+00,  4.9456e+00,  8.5273e-01,  1.2722e+00,  3.4192e-02],
          [-2.2802e+00,  5.4209e+00,  7.3384e-01,  1.0547e+00,  4.8244e-02],
          [-2.4202e+00,  5.8484e+00,  6.3427e-01,  9.1584e-01,  9.9341e-03]],

         [[-4.3739e-02,  5.1504e-01,  1.0975e+01,  1.0655e+01, -4.6406e-02],
          [-7.0657e-02,  1.0324e+00,  5.0149e+00,  6.1475e+00, -8.7170e-02],
          [-1.0969e-01,  1.5638e+00,  3.3187e+00,  4.2449e+00, -8.8702e-02],
          ...,
          [-3.2855e-01,  5.0560e+00,  8.9334e-01,  1.5361e+00, -2.5196e-02],
          [-3.5654e-01,  5.5729e+00,  7.2982e-01,  1.2863e+00,  4.0913e-03],
          [-4.0243e-01,  6.0430e+00,  6.1785e-01,  1.0998e+00, -2.2770e-02]],

         [[-2.1313e-01,  8.4752e-01,  6.1828e+00,  4.0903e+00, -1.2578e-01],
          [-4.0847e-01,  1.6971e+00,  2.7156e+00,  2.5345e+00, -1.5768e-01],
          [-6.3271e-01,  2.6245e+00,  1.5729e+00,  1.7903e+00, -2.4305e-01],
          ...,
          [-1.6057e+00,  8.8520e+00,  7.9249e-01,  8.6821e-01,  3.4334e-02],
          [-1.7298e+00,  9.7553e+00,  7.2173e-01,  7.5942e-01,  4.6293e-02],
          [-1.8392e+00,  1.0503e+01,  6.4108e-01,  7.1005e-01,  2.6249e-02]],

         [[-7.3565e-02,  6.5089e-01,  1.1903e+01,  1.0982e+01, -4.0928e-02],
          [-1.3162e-01,  1.3143e+00,  5.0725e+00,  6.1358e+00, -7.9352e-02],
          [-2.1580e-01,  2.0224e+00,  2.9709e+00,  4.1781e+00, -1.1765e-01],
          ...,
          [-6.8225e-01,  6.8795e+00,  7.4585e-01,  1.4343e+00,  3.3568e-03],
          [-7.5113e-01,  7.5674e+00,  6.3414e-01,  1.2045e+00,  3.7953e-02],
          [-8.1106e-01,  8.1890e+00,  5.2686e-01,  1.0339e+00, -1.1726e-03]],

         [[-1.0660e-01,  3.8525e-01,  1.0352e+01,  1.0969e+01, -3.2629e-02],
          [-1.9885e-01,  7.6684e-01,  4.9065e+00,  6.0896e+00, -6.4569e-02],
          [-2.9184e-01,  1.1227e+00,  3.4479e+00,  4.0672e+00, -3.4827e-02],
          ...,
          [-1.0771e+00,  3.5399e+00,  8.7503e-01,  1.3270e+00,  8.3110e-03],
          [-1.1835e+00,  3.8982e+00,  7.1376e-01,  1.0840e+00, -1.4405e-03],
          [-1.2678e+00,  4.2264e+00,  6.0131e-01,  9.2102e-01, -1.9443e-02]]],


        [[[-1.0332e-01,  6.4900e-03,  1.4969e+01,  2.6700e+01,  6.4525e-02],
          [-1.7585e-01,  7.6938e-03,  9.6635e+00,  1.5967e+01,  1.3576e-01],
          [-2.6351e-01,  1.2339e-03,  7.7894e+00,  1.1796e+01,  7.4236e-02],
          ...,
          [-7.4129e-01, -3.9110e-02,  3.5382e+00,  4.9691e+00, -3.4902e-03],
          [-7.9094e-01, -9.7254e-03,  2.8660e+00,  4.0944e+00, -7.5749e-03],
          [-7.7786e-01, -2.3959e-02,  2.3288e+00,  3.4008e+00, -1.4793e-02]],

         [[-5.7036e-04,  3.1747e-03,  5.0561e+01,  5.5663e+01, -5.1100e-02],
          [-8.5884e-04,  4.4149e-03,  3.0738e+01,  3.5031e+01, -2.5873e-02],
          [-9.0752e-04,  5.0615e-03,  2.3359e+01,  2.7016e+01, -5.1584e-02],
          ...,
          [-3.5904e-02,  2.7925e-03,  9.1376e+00,  1.1826e+01, -5.9143e-02],
          [-3.5599e-02,  2.7576e-03,  7.9049e+00,  1.0434e+01, -3.3498e-02],
          [-2.8968e-02,  1.3061e-03,  6.8739e+00,  8.7772e+00, -2.3659e-02]],

         [[-6.2379e-02, -1.1763e-01,  1.1665e+01,  7.4662e+00,  1.6361e-01],
          [-1.9099e-01, -4.8668e-01,  5.1034e+00,  3.9266e+00,  1.7009e-01],
          [-3.4006e-01, -1.0700e+00,  2.9196e+00,  2.2559e+00,  2.2960e-01],
          ...,
          [-2.1664e+00, -8.6788e+00,  4.1758e-01,  5.4570e-01,  7.4927e-02],
          [-2.4511e+00, -9.9941e+00,  3.2992e-01,  4.4312e-01,  9.5019e-02],
          [-2.4641e+00, -1.1124e+01,  2.3464e-01,  3.4128e-01,  9.8798e-02]],

         [[-2.8111e-02, -2.0228e-02,  2.9625e+01,  2.5135e+01, -1.1881e-02],
          [-4.5193e-02, -4.2983e-02,  1.8609e+01,  1.4916e+01,  1.7152e-02],
          [-6.8279e-02, -6.3454e-02,  1.3944e+01,  1.0842e+01, -1.9747e-02],
          ...,
          [-1.9714e-01, -2.0368e-01,  4.8127e+00,  4.7131e+00, -1.7396e-02],
          [-2.0952e-01, -2.0607e-01,  4.1415e+00,  3.9229e+00,  1.3785e-02],
          [-1.9385e-01, -2.1109e-01,  3.3984e+00,  3.1148e+00,  2.7087e-03]],

         [[-1.6508e-02,  5.8355e-02,  2.7584e+01,  1.8187e+01, -1.0148e-03],
          [-3.2844e-02,  9.8852e-02,  1.7026e+01,  1.2472e+01,  4.0771e-02],
          [-4.9845e-02,  1.3326e-01,  1.3298e+01,  9.9065e+00,  3.0464e-02],
          ...,
          [-1.3995e-01,  2.3068e-01,  5.9605e+00,  5.0793e+00,  4.1403e-02],
          [-1.4304e-01,  2.3905e-01,  5.2509e+00,  4.3580e+00,  2.7182e-04],
          [-1.3980e-01,  2.2016e-01,  4.5999e+00,  3.5767e+00,  1.1339e-02]],

         [[-5.3176e-02, -5.8030e-02,  1.8032e+01,  1.1857e+01,  8.6674e-02],
          [-7.8883e-02, -1.0990e-01,  9.6293e+00,  6.2172e+00,  9.8959e-02],
          [-1.1786e-01, -2.6876e-01,  6.6027e+00,  3.9845e+00,  4.8097e-02],
          ...,
          [-4.1287e-01, -2.3812e+00,  1.3924e+00,  1.3208e+00,  2.4413e-02],
          [-4.6188e-01, -2.7142e+00,  1.1315e+00,  1.0076e+00,  2.0681e-02],
          [-3.9778e-01, -3.0368e+00,  8.0749e-01,  7.3901e-01,  1.9833e-02]]],


        [[[-5.8150e-02,  3.5995e+00,  1.6420e+01,  4.7584e+00, -7.0866e-02],
          [-3.6920e-01,  7.1897e+00,  5.1850e+00,  3.1242e+00, -1.1096e-01],
          [-8.8841e-01,  1.0799e+01,  3.0479e+00,  2.1816e+00, -9.2515e-02],
          ...,
          [-9.4911e+00,  3.6370e+01,  5.6761e-01,  8.4153e-01, -7.7501e-02],
          [-1.1293e+01,  3.9916e+01,  5.1830e-01,  6.1259e-01, -8.8829e-02],
          [-1.2816e+01,  4.3210e+01,  3.6098e-01,  4.6468e-01, -1.4197e-01]],

         [[-9.3551e-02,  3.3667e+00,  1.5030e+01,  3.8705e+00, -2.7354e-02],
          [-4.0971e-01,  6.5954e+00,  3.8893e+00,  2.3016e+00, -3.3589e-02],
          [-8.6820e-01,  9.7152e+00,  2.2517e+00,  1.5234e+00, -3.6183e-02],
          ...,
          [-7.2074e+00,  2.7273e+01,  3.1139e-01,  4.2678e-01, -4.3136e-02],
          [-8.4615e+00,  2.9205e+01,  2.5116e-01,  3.4239e-01, -7.8212e-02],
          [-9.4866e+00,  3.1192e+01,  2.0240e-01,  2.5936e-01, -6.3968e-02]],

         [[-1.3312e-01,  3.8724e+00,  1.2406e+01,  3.5572e+00, -1.3459e-01],
          [-6.3633e-01,  7.8612e+00,  4.5246e+00,  2.5015e+00, -9.7719e-02],
          [-1.3915e+00,  1.1881e+01,  2.4768e+00,  1.8191e+00, -6.0841e-02],
          ...,
          [-1.2660e+01,  4.3424e+01,  6.5723e-01,  7.2140e-01, -1.1679e-01],
          [-1.4850e+01,  4.8104e+01,  5.7785e-01,  5.6302e-01, -9.6271e-02],
          [-1.6690e+01,  5.2262e+01,  4.3513e-01,  4.7229e-01, -2.1611e-01]],

         [[-1.5584e-02,  3.5263e+00,  1.8365e+01,  4.9057e+00, -2.0128e-02],
          [-1.7814e-01,  6.9094e+00,  4.6941e+00,  2.8640e+00, -1.8333e-02],
          [-4.5293e-01,  1.0250e+01,  2.6045e+00,  1.8417e+00, -5.4865e-02],
          ...,
          [-5.0065e+00,  3.0007e+01,  3.2124e-01,  5.4771e-01, -2.8770e-02],
          [-6.0098e+00,  3.2351e+01,  2.5848e-01,  4.0851e-01, -6.2785e-02],
          [-6.8704e+00,  3.4699e+01,  1.9089e-01,  2.9915e-01, -7.5505e-02]],

         [[-1.1312e-01,  3.7277e+00,  1.4168e+01,  4.0820e+00, -1.3721e-01],
          [-5.8081e-01,  7.5247e+00,  5.0380e+00,  2.8619e+00, -1.2485e-01],
          [-1.2724e+00,  1.1335e+01,  2.8348e+00,  2.0856e+00, -8.6512e-02],
          ...,
          [-1.1504e+01,  4.0721e+01,  6.8639e-01,  8.5447e-01, -1.2081e-01],
          [-1.3520e+01,  4.5052e+01,  6.1477e-01,  6.5787e-01, -1.0482e-01],
          [-1.5198e+01,  4.8925e+01,  4.5886e-01,  5.2493e-01, -2.1637e-01]],

         [[-9.0706e-02,  3.5735e+00,  1.6079e+01,  4.7526e+00, -1.0061e-01],
          [-4.9895e-01,  7.1119e+00,  4.8298e+00,  3.0963e+00, -1.3543e-01],
          [-1.1116e+00,  1.0671e+01,  3.0440e+00,  2.1302e+00, -9.3929e-02],
          ...,
          [-1.0407e+01,  3.5095e+01,  5.8763e-01,  8.0475e-01, -9.5914e-02],
          [-1.2262e+01,  3.8448e+01,  5.2142e-01,  5.9274e-01, -1.1925e-01],
          [-1.3825e+01,  4.1568e+01,  3.7033e-01,  4.4068e-01, -1.4970e-01]]]]), 'traj_scores': tensor([[-1.2608, -2.3533, -2.5051, -1.9333, -1.6260, -1.6172],
        [-2.2829, -1.6909, -1.5641, -2.0812, -1.3438, -2.1308],
        [-2.3359, -0.3292, -5.5610, -2.4221, -2.5290, -4.4671],
        [-1.6164, -3.2463, -1.6236, -2.4780, -1.2370, -1.6549]])}]
(Pdb) 1
(Pdb) dict_keys(['traj_0', 'traj_scores_0', 'traj_1', 'traj_scores_1', 'traj', 'traj_scores'])
(Pdb) *** AttributeError: 'list' object has no attribute 'shape'
(Pdb) 1
(Pdb) *** AttributeError: 'list' object has no attribute 'shape'
(Pdb) 5
(Pdb) [[LiDARInstance3DBoxes(
    tensor([[-7.5262e-01, -2.4579e+01, -2.2621e+00,  1.9450e+00,  4.5364e+00,
          1.5434e+00, -3.1230e+00,  8.8571e-02,  5.5166e+00],
        [-1.2292e+01,  3.5435e+01, -9.5619e-01,  7.1796e-01,  8.1444e-01,
          1.7480e+00,  3.0222e+00, -2.9149e-01,  1.2141e+00],
        [-4.4362e+00, -1.0457e+01, -1.9604e+00,  5.6273e-01,  1.7301e+00,
          1.0861e+00,  2.6956e-02, -1.2011e-03, -9.9059e-04],
        [ 3.1940e-02, -6.2492e-02, -7.7301e-01,  1.7408e+00,  4.1469e+00,
          1.5712e+00, -3.1400e+00, -1.7210e-01,  6.9688e+00]])), tensor([0.8999, 0.8660, 0.8401, 0.4058]), tensor([0, 8, 7, 0]), tensor([1, 2, 0, 0]), tensor([True, True, True])]]
(Pdb) 1
(Pdb) 3
(Pdb) *** AttributeError: 'Tensor' object has no attribute 'keys'
(Pdb) torch.Size([4, 6, 12, 5])
(Pdb) 557  	
558  	                traj_scores, traj = traj_scores.cpu(), traj.cpu()
559  	                preds['traj' + subfix] = traj
560  	                preds['traj_scores' + subfix] = traj_scores
561  	            ret_list.append(preds)
562  ->	        return ret_list
[EOF]
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(562)get_trajs()->[{'traj': tensor([[[[ 6....4970e-01]]]]), 'traj_0': tensor([[[[ 3....3412e-02]]]]), 'traj_1': tensor([[[[ 5....0226e-02]]]]), 'traj_scores': tensor([[-1.2...70, -1.6549]]), ...}]
-> return ret_list
(Pdb) --Return--
> /opt/homebrew/anaconda3/envs/uniad/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py(186)new_func()->[{'traj': tensor([[[[ 6....4970e-01]]]]), 'traj_0': tensor([[[[ 3....3412e-02]]]]), 'traj_1': tensor([[[[ 5....0226e-02]]]]), 'traj_scores': tensor([[-1.2...70, -1.6549]]), ...}]
-> return old_func(*args, **kwargs)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(183)forward_test()
-> bboxes, scores, labels, bbox_index, mask = track_boxes[0]
(Pdb) 178  	        track_boxes[0][2] = torch.cat([track_boxes[0][2], sdc_track_boxes[0][2]], dim=0)
179  	        track_boxes[0][3] = torch.cat([track_boxes[0][3], sdc_track_boxes[0][3]], dim=0)
180  	        memory, memory_mask, memory_pos, lane_query, _, lane_query_pos, hw_lvl = outs_seg['args_tuple']
181  	        outs_motion = self(bev_embed, track_query, lane_query, lane_query_pos, track_boxes)
182  	        traj_results = self.get_trajs(outs_motion, track_boxes)
183  ->	        bboxes, scores, labels, bbox_index, mask = track_boxes[0]
184  	        outs_motion['track_scores'] = scores[None, :]
185  	        labels[-1] = 0
186  	        def filter_vehicle_query(outs_motion, labels, vehicle_id_list):
187  	            if len(labels) < 1:  # No other obj query except sdc query.
188  	                return None
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(184)forward_test()
-> outs_motion['track_scores'] = scores[None, :]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(185)forward_test()
-> labels[-1] = 0
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(186)forward_test()
-> def filter_vehicle_query(outs_motion, labels, vehicle_id_list):
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(200)forward_test()
-> outs_motion = filter_vehicle_query(outs_motion, labels, self.vehicle_id_list)
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(203)forward_test()
-> outs_motion['sdc_traj_query'] = outs_motion['traj_query'][:, :, -1]
(Pdb) torch.Size([3, 1, 3, 6, 256])
(Pdb) torch.Size([3, 1, 6, 256])
(Pdb) tensor([0, 8, 7, 0])
(Pdb) torch.Size([3, 1, 3, 6, 256])
(Pdb) 198  	            return outs_motion
199  	
200  	        outs_motion = filter_vehicle_query(outs_motion, labels, self.vehicle_id_list)
201  	
202  	        # filter sdc query
203  ->	        outs_motion['sdc_traj_query'] = outs_motion['traj_query'][:, :, -1]
204  	        outs_motion['sdc_track_query'] = outs_motion['track_query'][:, -1]
205  	        outs_motion['sdc_track_query_pos'] = outs_motion['track_query_pos'][:, -1]
206  	        outs_motion['traj_query'] = outs_motion['traj_query'][:, :, :-1]
207  	        outs_motion['track_query'] = outs_motion['track_query'][:, :-1]
208  	        outs_motion['track_query_pos'] = outs_motion['track_query_pos'][:, :-1]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(204)forward_test()
-> outs_motion['sdc_track_query'] = outs_motion['track_query'][:, -1]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(205)forward_test()
-> outs_motion['sdc_track_query_pos'] = outs_motion['track_query_pos'][:, -1]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(206)forward_test()
-> outs_motion['traj_query'] = outs_motion['traj_query'][:, :, :-1]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(207)forward_test()
-> outs_motion['track_query'] = outs_motion['track_query'][:, :-1]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(208)forward_test()
-> outs_motion['track_query_pos'] = outs_motion['track_query_pos'][:, :-1]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(209)forward_test()
-> outs_motion['track_scores'] = outs_motion['track_scores'][:, :-1]
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(211)forward_test()
-> return traj_results, outs_motion
(Pdb) --Return--
> /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/dense_heads/motion_head.py(211)forward_test()->([{'traj': tensor([[[[ 6....4970e-01]]]]), 'traj_0': tensor([[[[ 3....3412e-02]]]]), 'traj_1': tensor([[[[ 5....0226e-02]]]]), 'traj_scores': tensor([[-1.2...70, -1.6549]]), ...}], {'all_traj_preds': tensor([[[[[[...970e-01]]]]]]), 'all_traj_scores': tensor([[[[-1..., -1.6549]]]]), 'sdc_track_query': tensor([[-1.8... 8.2279e-01]]), 'sdc_track_query_pos': tensor([[-1.3...-3.1916e-02]]), ...})
-> return traj_results, outs_motion
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_e2e.py(306)forward_test()
-> outs_motion['bev_pos'] = result_track[0]['bev_pos']
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_e2e.py(308)forward_test()
-> outs_occ = dict()
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_e2e.py(309)forward_test()
-> if self.with_occ_head:
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_e2e.py(310)forward_test()
-> occ_no_query = outs_motion['track_query'].shape[1] == 0
(Pdb) > /Users/liangming.xu/code/UniAD/projects/mmdet3d_plugin/uniad/detectors/uniad_e2e.py(311)forward_test()
-> outs_occ = self.occ_head.forward_test(
(Pdb) 